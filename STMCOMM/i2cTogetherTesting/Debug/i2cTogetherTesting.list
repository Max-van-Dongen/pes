
i2cTogetherTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000488c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab4  08004ab4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004abc  08004abc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08004ad0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08004ad0  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e8de  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002081  00000000  00000000  0002e95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  000309e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e0  00000000  00000000  00031698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200e4  00000000  00000000  00032078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010092  00000000  00000000  0005215c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1620  00000000  00000000  000621ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003480  00000000  00000000  00123810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00126c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004a00 	.word	0x08004a00

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004a00 	.word	0x08004a00

080001cc <strcmp>:
 80001cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d4:	2a01      	cmp	r2, #1
 80001d6:	bf28      	it	cs
 80001d8:	429a      	cmpcs	r2, r3
 80001da:	d0f7      	beq.n	80001cc <strcmp>
 80001dc:	1ad0      	subs	r0, r2, r3
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e0:	f000 fba7 	bl	8000c32 <HAL_Init>
//	  aTxBuffer[2]=0x43;
//	  aTxBuffer[3]=0x44;
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e4:	f000 f826 	bl	8000534 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e8:	f000 f8f6 	bl	80006d8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ec:	f000 f8c4 	bl	8000678 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80004f0:	f000 f882 	bl	80005f8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <main+0x50>)
 80004f6:	f001 f917 	bl	8001728 <HAL_I2C_EnableListen_IT>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <main+0x28>
	  {
		/* Transfer error in reception process */
		Error_Handler();
 8000500:	f000 fa22 	bl	8000948 <Error_Handler>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (Xfer_Complete == 1) {
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <main+0x54>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d1fb      	bne.n	8000504 <main+0x28>
			HAL_Delay(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f000 fc05 	bl	8000d1c <HAL_Delay>
			/*##- Put I2C peripheral in listen mode process ###########################*/
			if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) {
 8000512:	4806      	ldr	r0, [pc, #24]	; (800052c <main+0x50>)
 8000514:	f001 f908 	bl	8001728 <HAL_I2C_EnableListen_IT>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <main+0x46>
				/* Transfer error in reception process */
				Error_Handler();
 800051e:	f000 fa13 	bl	8000948 <Error_Handler>
			}
			Xfer_Complete = 0;
 8000522:	4b03      	ldr	r3, [pc, #12]	; (8000530 <main+0x54>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
		if (Xfer_Complete == 1) {
 8000528:	e7ec      	b.n	8000504 <main+0x28>
 800052a:	bf00      	nop
 800052c:	20000070 	.word	0x20000070
 8000530:	2000002c 	.word	0x2000002c

08000534 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b096      	sub	sp, #88	; 0x58
 8000538:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2244      	movs	r2, #68	; 0x44
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f004 fa27 	bl	8004996 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000548:	463b      	mov	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000556:	f44f 7000 	mov.w	r0, #512	; 0x200
 800055a:	f002 fc07 	bl	8002d6c <HAL_PWREx_ControlVoltageScaling>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000564:	f000 f9f0 	bl	8000948 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000568:	f002 fbe2 	bl	8002d30 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800056c:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <SystemClock_Config+0xc0>)
 800056e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000572:	4a20      	ldr	r2, [pc, #128]	; (80005f4 <SystemClock_Config+0xc0>)
 8000574:	f023 0318 	bic.w	r3, r3, #24
 8000578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 800057c:	2314      	movs	r3, #20
 800057e:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800058c:	2360      	movs	r3, #96	; 0x60
 800058e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000594:	2301      	movs	r3, #1
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 800059c:	2310      	movs	r3, #16
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a0:	2307      	movs	r3, #7
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fc31 	bl	8002e18 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x8c>
		Error_Handler();
 80005bc:	f000 f9c4 	bl	8000948 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2303      	movs	r3, #3
 80005c6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80005d4:	463b      	mov	r3, r7
 80005d6:	2101      	movs	r1, #1
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 f831 	bl	8003640 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xb4>
		Error_Handler();
 80005e4:	f000 f9b0 	bl	8000948 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80005e8:	f003 fc44 	bl	8003e74 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005ec:	bf00      	nop
 80005ee:	3758      	adds	r7, #88	; 0x58
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000

080005f8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_I2C1_Init+0x74>)
 80005fe:	4a1c      	ldr	r2, [pc, #112]	; (8000670 <MX_I2C1_Init+0x78>)
 8000600:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00707CBB;
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_I2C1_Init+0x74>)
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <MX_I2C1_Init+0x7c>)
 8000606:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 36;
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_I2C1_Init+0x74>)
 800060a:	2224      	movs	r2, #36	; 0x24
 800060c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_I2C1_Init+0x74>)
 8000610:	2201      	movs	r2, #1
 8000612:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_I2C1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C1_Init+0x74>)
 8000628:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800062c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C1_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <MX_I2C1_Init+0x74>)
 8000636:	f000 fe77 	bl	8001328 <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000640:	f000 f982 	bl	8000948 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000644:	2100      	movs	r1, #0
 8000646:	4809      	ldr	r0, [pc, #36]	; (800066c <MX_I2C1_Init+0x74>)
 8000648:	f002 fada 	bl	8002c00 <HAL_I2CEx_ConfigAnalogFilter>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000652:	f000 f979 	bl	8000948 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000656:	2100      	movs	r1, #0
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_I2C1_Init+0x74>)
 800065a:	f002 fb1c 	bl	8002c96 <HAL_I2CEx_ConfigDigitalFilter>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x70>
		Error_Handler();
 8000664:	f000 f970 	bl	8000948 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000070 	.word	0x20000070
 8000670:	40005400 	.word	0x40005400
 8000674:	00707cbb 	.word	0x00707cbb

08000678 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 8000680:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006bc:	f003 fcdc 	bl	8004078 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80006c6:	f000 f93f 	bl	8000948 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000c4 	.word	0x200000c4
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_GPIO_Init+0xa8>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a23      	ldr	r2, [pc, #140]	; (8000780 <MX_GPIO_Init+0xa8>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_GPIO_Init+0xa8>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_GPIO_Init+0xa8>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <MX_GPIO_Init+0xa8>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_GPIO_Init+0xa8>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_GPIO_Init+0xa8>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a17      	ldr	r2, [pc, #92]	; (8000780 <MX_GPIO_Init+0xa8>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_GPIO_Init+0xa8>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2108      	movs	r1, #8
 800073a:	4812      	ldr	r0, [pc, #72]	; (8000784 <MX_GPIO_Init+0xac>)
 800073c:	f000 fddc 	bl	80012f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000740:	2302      	movs	r3, #2
 8000742:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4619      	mov	r1, r3
 8000752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000756:	f000 fc65 	bl	8001024 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 800075a:	2308      	movs	r3, #8
 800075c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4619      	mov	r1, r3
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_GPIO_Init+0xac>)
 8000772:	f000 fc57 	bl	8001024 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000
 8000784:	48000400 	.word	0x48000400

08000788 <HAL_I2C_SlaveTxCpltCallback>:
 * @note   This example shows a simple way to report end of IT Tx transfer, and
 *         you can add your own implementation.
 * @retval None
 */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	/* Toggle LED4: Transfer in transmission process is correct */

	Xfer_Complete = 1;
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
//	aTxBuffer[0]++;
//	aTxBuffer[1]++;
//	aTxBuffer[2]++;
//	aTxBuffer[3]++;

}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	2000002c 	.word	0x2000002c

080007a8 <HAL_I2C_SlaveRxCpltCallback>:
 * @param  I2cHandle: I2C handle
 * @note   This example shows a simple way to report end of IT Rx transfer, and
 *         you can add your own implementation.
 * @retval None
 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
//	memset(aTxBuffer, 0, sizeof(aTxBuffer));
	int hasNullTerminator = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < sizeof(aRxBuffer); i++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	e00b      	b.n	80007d2 <HAL_I2C_SlaveRxCpltCallback+0x2a>
	  if (aRxBuffer[i] == '\0') {
 80007ba:	4a2e      	ldr	r2, [pc, #184]	; (8000874 <HAL_I2C_SlaveRxCpltCallback+0xcc>)
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d102      	bne.n	80007cc <HAL_I2C_SlaveRxCpltCallback+0x24>
	    hasNullTerminator = 1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
	    break;
 80007ca:	e005      	b.n	80007d8 <HAL_I2C_SlaveRxCpltCallback+0x30>
	for (int i = 0; i < sizeof(aRxBuffer); i++) {
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	2b1f      	cmp	r3, #31
 80007d6:	d9f0      	bls.n	80007ba <HAL_I2C_SlaveRxCpltCallback+0x12>
	  }
	}

	if (hasNullTerminator) {
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d042      	beq.n	8000864 <HAL_I2C_SlaveRxCpltCallback+0xbc>
	  if (strcmp((char*)aRxBuffer, "LedOff") == 0) {
 80007de:	4926      	ldr	r1, [pc, #152]	; (8000878 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 80007e0:	4824      	ldr	r0, [pc, #144]	; (8000874 <HAL_I2C_SlaveRxCpltCallback+0xcc>)
 80007e2:	f7ff fcf3 	bl	80001cc <strcmp>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d105      	bne.n	80007f8 <HAL_I2C_SlaveRxCpltCallback+0x50>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2108      	movs	r1, #8
 80007f0:	4822      	ldr	r0, [pc, #136]	; (800087c <HAL_I2C_SlaveRxCpltCallback+0xd4>)
 80007f2:	f000 fd81 	bl	80012f8 <HAL_GPIO_WritePin>
 80007f6:	e035      	b.n	8000864 <HAL_I2C_SlaveRxCpltCallback+0xbc>

	  } else if (strcmp((char*)aRxBuffer, "LedOn") == 0) {
 80007f8:	4921      	ldr	r1, [pc, #132]	; (8000880 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 80007fa:	481e      	ldr	r0, [pc, #120]	; (8000874 <HAL_I2C_SlaveRxCpltCallback+0xcc>)
 80007fc:	f7ff fce6 	bl	80001cc <strcmp>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d105      	bne.n	8000812 <HAL_I2C_SlaveRxCpltCallback+0x6a>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	2108      	movs	r1, #8
 800080a:	481c      	ldr	r0, [pc, #112]	; (800087c <HAL_I2C_SlaveRxCpltCallback+0xd4>)
 800080c:	f000 fd74 	bl	80012f8 <HAL_GPIO_WritePin>
 8000810:	e028      	b.n	8000864 <HAL_I2C_SlaveRxCpltCallback+0xbc>

	  } else if (strcmp((char*)aRxBuffer, "SendStart") == 0) {
 8000812:	491c      	ldr	r1, [pc, #112]	; (8000884 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 8000814:	4817      	ldr	r0, [pc, #92]	; (8000874 <HAL_I2C_SlaveRxCpltCallback+0xcc>)
 8000816:	f7ff fcd9 	bl	80001cc <strcmp>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <HAL_I2C_SlaveRxCpltCallback+0x7e>
		  const char *message = "Send:10:Test";
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	e01e      	b.n	8000864 <HAL_I2C_SlaveRxCpltCallback+0xbc>

//		  memset(aRxBuffer, 0, sizeof(aRxBuffer));

	  } else if (strcmp((char*)aRxBuffer, "SendStop") == 0) {
 8000826:	4919      	ldr	r1, [pc, #100]	; (800088c <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <HAL_I2C_SlaveRxCpltCallback+0xcc>)
 800082a:	f7ff fccf 	bl	80001cc <strcmp>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d105      	bne.n	8000840 <HAL_I2C_SlaveRxCpltCallback+0x98>
		  memset(aTxBuffer, 0, sizeof(aTxBuffer));
 8000834:	2220      	movs	r2, #32
 8000836:	2100      	movs	r1, #0
 8000838:	4815      	ldr	r0, [pc, #84]	; (8000890 <HAL_I2C_SlaveRxCpltCallback+0xe8>)
 800083a:	f004 f8ac 	bl	8004996 <memset>
 800083e:	e011      	b.n	8000864 <HAL_I2C_SlaveRxCpltCallback+0xbc>

	  } else if (strcmp((char*)aRxBuffer, "ClientIdRequest") == 0) {
 8000840:	4914      	ldr	r1, [pc, #80]	; (8000894 <HAL_I2C_SlaveRxCpltCallback+0xec>)
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <HAL_I2C_SlaveRxCpltCallback+0xcc>)
 8000844:	f7ff fcc2 	bl	80001cc <strcmp>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d10a      	bne.n	8000864 <HAL_I2C_SlaveRxCpltCallback+0xbc>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	2108      	movs	r1, #8
 8000852:	480a      	ldr	r0, [pc, #40]	; (800087c <HAL_I2C_SlaveRxCpltCallback+0xd4>)
 8000854:	f000 fd50 	bl	80012f8 <HAL_GPIO_WritePin>
		  const char *message = "Client:14";
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_I2C_SlaveRxCpltCallback+0xf0>)
 800085a:	60fb      	str	r3, [r7, #12]
		  strcpy((char *)aTxBuffer, message);
 800085c:	68f9      	ldr	r1, [r7, #12]
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_I2C_SlaveRxCpltCallback+0xe8>)
 8000860:	f004 f8c6 	bl	80049f0 <strcpy>
	} else {
	  // Handle the case where aRxBuffer is not a null-terminated string
	}
//	  memset(aRxBuffer, 0, sizeof(aRxBuffer));
//	memset(aRxBuffer, 0, sizeof(aRxBuffer));
	Xfer_Complete = 1;
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_I2C_SlaveRxCpltCallback+0xf4>)
 8000866:	2201      	movs	r2, #1
 8000868:	601a      	str	r2, [r3, #0]
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000050 	.word	0x20000050
 8000878:	08004a18 	.word	0x08004a18
 800087c:	48000400 	.word	0x48000400
 8000880:	08004a20 	.word	0x08004a20
 8000884:	08004a28 	.word	0x08004a28
 8000888:	08004a34 	.word	0x08004a34
 800088c:	08004a44 	.word	0x08004a44
 8000890:	20000030 	.word	0x20000030
 8000894:	08004a50 	.word	0x08004a50
 8000898:	08004a60 	.word	0x08004a60
 800089c:	2000002c 	.word	0x2000002c

080008a0 <HAL_I2C_AddrCallback>:
 * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
 * @param  AddrMatchCode: Address Match Code
 * @retval None
 */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
 80008ac:	4613      	mov	r3, r2
 80008ae:	803b      	strh	r3, [r7, #0]
	Transfer_Direction = TransferDirection;
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	4a14      	ldr	r2, [pc, #80]	; (8000904 <HAL_I2C_AddrCallback+0x64>)
 80008b4:	6013      	str	r3, [r2, #0]
	if (Transfer_Direction != 0) {
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_I2C_AddrCallback+0x64>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d011      	beq.n	80008e2 <HAL_I2C_AddrCallback+0x42>
		/*##- Start the transmission process #####################################*/
		/* While the I2C in reception process, user can transmit data through
		 "aTxBuffer" buffer */
		if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t*) aTxBuffer,
 80008be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008c2:	2220      	movs	r2, #32
 80008c4:	4910      	ldr	r1, [pc, #64]	; (8000908 <HAL_I2C_AddrCallback+0x68>)
 80008c6:	4811      	ldr	r0, [pc, #68]	; (800090c <HAL_I2C_AddrCallback+0x6c>)
 80008c8:	f000 fdca 	bl	8001460 <HAL_I2C_Slave_Seq_Transmit_IT>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_I2C_AddrCallback+0x36>
				TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)

		{
			/* Transfer error in transmission process */
			Error_Handler();
 80008d2:	f000 f839 	bl	8000948 <Error_Handler>
		}

		  memset(aTxBuffer, 0, sizeof(aTxBuffer));
 80008d6:	2220      	movs	r2, #32
 80008d8:	2100      	movs	r1, #0
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <HAL_I2C_AddrCallback+0x68>)
 80008dc:	f004 f85b 	bl	8004996 <memset>
			Error_Handler();
		}

	}

}
 80008e0:	e00b      	b.n	80008fa <HAL_I2C_AddrCallback+0x5a>
		if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t*) aRxBuffer,
 80008e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008e6:	2220      	movs	r2, #32
 80008e8:	4909      	ldr	r1, [pc, #36]	; (8000910 <HAL_I2C_AddrCallback+0x70>)
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <HAL_I2C_AddrCallback+0x6c>)
 80008ec:	f000 fe6a 	bl	80015c4 <HAL_I2C_Slave_Seq_Receive_IT>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_I2C_AddrCallback+0x5a>
			Error_Handler();
 80008f6:	f000 f827 	bl	8000948 <Error_Handler>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000028 	.word	0x20000028
 8000908:	20000030 	.word	0x20000030
 800090c:	20000070 	.word	0x20000070
 8000910:	20000050 	.word	0x20000050

08000914 <HAL_I2C_ListenCpltCallback>:
 * @brief  Listen Complete callback.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval None
 */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <HAL_I2C_ErrorCallback>:
 * @param  I2cHandle: I2C handle
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	/** Error_Handler() function is called when error occurs.
	 * 1- When Slave doesn't acknowledge its address, Master restarts communication.
	 * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
	 */
	if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF) {
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 ffc0 	bl	80018b6 <HAL_I2C_GetError>
 8000936:	4603      	mov	r3, r0
 8000938:	2b04      	cmp	r3, #4
 800093a:	d001      	beq.n	8000940 <HAL_I2C_ErrorCallback+0x18>
		Error_Handler();
 800093c:	f000 f804 	bl	8000948 <Error_Handler>
	}
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_MspInit+0x44>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_MspInit+0x44>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6613      	str	r3, [r2, #96]	; 0x60
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_MspInit+0x44>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x44>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x44>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6593      	str	r3, [r2, #88]	; 0x58
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x44>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09e      	sub	sp, #120	; 0x78
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2254      	movs	r2, #84	; 0x54
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 ffea 	bl	8004996 <memset>
  if(hi2c->Instance==I2C1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a26      	ldr	r2, [pc, #152]	; (8000a60 <HAL_I2C_MspInit+0xc4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d145      	bne.n	8000a58 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009cc:	2340      	movs	r3, #64	; 0x40
 80009ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 f855 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009e4:	f7ff ffb0 	bl	8000948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <HAL_I2C_MspInit+0xc8>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <HAL_I2C_MspInit+0xc8>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <HAL_I2C_MspInit+0xc8>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a00:	23c0      	movs	r3, #192	; 0xc0
 8000a02:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a04:	2312      	movs	r3, #18
 8000a06:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a10:	2304      	movs	r3, #4
 8000a12:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4813      	ldr	r0, [pc, #76]	; (8000a68 <HAL_I2C_MspInit+0xcc>)
 8000a1c:	f000 fb02 	bl	8001024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_I2C_MspInit+0xc8>)
 8000a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a24:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_I2C_MspInit+0xc8>)
 8000a26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_I2C_MspInit+0xc8>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	201f      	movs	r0, #31
 8000a3e:	f000 fa6c 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a42:	201f      	movs	r0, #31
 8000a44:	f000 fa85 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2020      	movs	r0, #32
 8000a4e:	f000 fa64 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a52:	2020      	movs	r0, #32
 8000a54:	f000 fa7d 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a58:	bf00      	nop
 8000a5a:	3778      	adds	r7, #120	; 0x78
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40005400 	.word	0x40005400
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48000400 	.word	0x48000400

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09e      	sub	sp, #120	; 0x78
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2254      	movs	r2, #84	; 0x54
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f003 ff82 	bl	8004996 <memset>
  if(huart->Instance==USART2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <HAL_UART_MspInit+0xcc>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d148      	bne.n	8000b2e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 ffed 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab4:	f7ff ff48 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <HAL_UART_MspInit+0xd0>)
 8000aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abc:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <HAL_UART_MspInit+0xd0>)
 8000abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <HAL_UART_MspInit+0xd0>)
 8000ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <HAL_UART_MspInit+0xd0>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_UART_MspInit+0xd0>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0xd0>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af8:	2307      	movs	r3, #7
 8000afa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b00:	4619      	mov	r1, r3
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f000 fa8d 	bl	8001024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b0e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b24:	4619      	mov	r1, r3
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2a:	f000 fa7b 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3778      	adds	r7, #120	; 0x78
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f8a6 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <I2C1_EV_IRQHandler+0x10>)
 8000b9a:	f000 fde5 	bl	8001768 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000070 	.word	0x20000070

08000ba8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <I2C1_ER_IRQHandler+0x10>)
 8000bae:	f000 fdf5 	bl	800179c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000070 	.word	0x20000070

08000bbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be4:	f7ff ffea 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	; (8000c2c <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f003 fecb 	bl	80049a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c12:	f7ff fc63 	bl	80004dc <main>

08000c16 <LoopForever>:

LoopForever:
    b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c24:	08004ac4 	.word	0x08004ac4
  ldr r2, =_sbss
 8000c28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c2c:	20000150 	.word	0x20000150

08000c30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_IRQHandler>

08000c32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f961 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f80e 	bl	8000c64 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	e001      	b.n	8000c58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c54:	f7ff fe7e 	bl	8000954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d023      	beq.n	8000cc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_InitTick+0x70>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f96d 	bl	8000f6e <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10f      	bne.n	8000cba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d809      	bhi.n	8000cb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 f937 	bl	8000f1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_InitTick+0x74>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e007      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e004      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	e001      	b.n	8000cc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	2000014c 	.word	0x2000014c

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	2000014c 	.word	0x2000014c

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f7ff ff8e 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff29 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff3e 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff8e 	bl	8000e58 <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5d 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff31 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffa2 	bl	8000ec0 <SysTick_Config>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d005      	beq.n	8000faa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	e029      	b.n	8000ffe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 020e 	bic.w	r2, r2, #14
 8000fb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0201 	bic.w	r2, r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f003 021c 	and.w	r2, r3, #28
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fdc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	4798      	blx	r3
    }
  }
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001016:	b2db      	uxtb	r3, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001032:	e148      	b.n	80012c6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2101      	movs	r1, #1
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 813a 	beq.w	80012c0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d005      	beq.n	8001064 <HAL_GPIO_Init+0x40>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d130      	bne.n	80010c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109a:	2201      	movs	r2, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	f003 0201 	and.w	r2, r3, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d017      	beq.n	8001102 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d123      	bne.n	8001156 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	6939      	ldr	r1, [r7, #16]
 8001152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0203 	and.w	r2, r3, #3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8094 	beq.w	80012c0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001198:	4b52      	ldr	r3, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x2c0>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119c:	4a51      	ldr	r2, [pc, #324]	; (80012e4 <HAL_GPIO_Init+0x2c0>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6613      	str	r3, [r2, #96]	; 0x60
 80011a4:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <HAL_GPIO_Init+0x2c0>)
 80011a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b0:	4a4d      	ldr	r2, [pc, #308]	; (80012e8 <HAL_GPIO_Init+0x2c4>)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011da:	d00d      	beq.n	80011f8 <HAL_GPIO_Init+0x1d4>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a43      	ldr	r2, [pc, #268]	; (80012ec <HAL_GPIO_Init+0x2c8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d007      	beq.n	80011f4 <HAL_GPIO_Init+0x1d0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a42      	ldr	r2, [pc, #264]	; (80012f0 <HAL_GPIO_Init+0x2cc>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d101      	bne.n	80011f0 <HAL_GPIO_Init+0x1cc>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e004      	b.n	80011fa <HAL_GPIO_Init+0x1d6>
 80011f0:	2307      	movs	r3, #7
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x1d6>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_Init+0x1d6>
 80011f8:	2300      	movs	r3, #0
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	f002 0203 	and.w	r2, r2, #3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4093      	lsls	r3, r2
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800120a:	4937      	ldr	r1, [pc, #220]	; (80012e8 <HAL_GPIO_Init+0x2c4>)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800123c:	4a2d      	ldr	r2, [pc, #180]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001266:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001290:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f47f aeaf 	bne.w	8001034 <HAL_GPIO_Init+0x10>
  }
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	48000400 	.word	0x48000400
 80012f0:	48000800 	.word	0x48000800
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001314:	e002      	b.n	800131c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e08d      	b.n	8001456 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d106      	bne.n	8001354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fb24 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2224      	movs	r2, #36	; 0x24
 8001358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0201 	bic.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001378:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001388:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d107      	bne.n	80013a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	e006      	b.n	80013b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d108      	bne.n	80013ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	e007      	b.n	80013da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69d9      	ldr	r1, [r3, #28]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1a      	ldr	r2, [r3, #32]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0201 	orr.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2220      	movs	r2, #32
 8001442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	4613      	mov	r3, r2
 800146e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800147c:	2b28      	cmp	r3, #40	; 0x28
 800147e:	f040 8098 	bne.w	80015b2 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e08c      	b.n	80015b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800149a:	f248 0101 	movw	r1, #32769	; 0x8001
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f001 fb50 	bl	8002b44 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e080      	b.n	80015b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b2a      	cmp	r3, #42	; 0x2a
 80014c4:	d12a      	bne.n	800151c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80014c6:	2102      	movs	r1, #2
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f001 fb3b 	bl	8002b44 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014dc:	d11e      	bne.n	800151c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ec:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d012      	beq.n	800151c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fa:	4a30      	ldr	r2, [pc, #192]	; (80015bc <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 80014fc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd3f 	bl	8000f86 <HAL_DMA_Abort_IT>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001518:	4610      	mov	r0, r2
 800151a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2229      	movs	r2, #41	; 0x29
 8001520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2220      	movs	r2, #32
 8001528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001540:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	88fa      	ldrh	r2, [r7, #6]
 800154c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8001562:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b08      	cmp	r3, #8
 8001570:	bf0c      	ite	eq
 8001572:	2301      	moveq	r3, #1
 8001574:	2300      	movne	r3, #0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	0c1b      	lsrs	r3, r3, #16
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d106      	bne.n	800159c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 800158e:	7dfb      	ldrb	r3, [r7, #23]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2208      	movs	r2, #8
 800159a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80015a4:	f248 0101 	movw	r1, #32769	; 0x8001
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f001 fa47 	bl	8002a3c <I2C_Enable_IRQ>

    return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e000      	b.n	80015b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
  }
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	0800299b 	.word	0x0800299b
 80015c0:	080018cf 	.word	0x080018cf

080015c4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	4613      	mov	r3, r2
 80015d2:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80015e0:	2b28      	cmp	r3, #40	; 0x28
 80015e2:	f040 8098 	bne.w	8001716 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d105      	bne.n	80015fe <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e08c      	b.n	8001718 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80015fe:	f248 0102 	movw	r1, #32770	; 0x8002
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f001 fa9e 	bl	8002b44 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8001612:	2302      	movs	r3, #2
 8001614:	e080      	b.n	8001718 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b29      	cmp	r3, #41	; 0x29
 8001628:	d12a      	bne.n	8001680 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800162a:	2101      	movs	r1, #1
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f001 fa89 	bl	8002b44 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001640:	d11e      	bne.n	8001680 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001650:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	2b00      	cmp	r3, #0
 8001658:	d012      	beq.n	8001680 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	4a30      	ldr	r2, [pc, #192]	; (8001720 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001660:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fc8d 	bl	8000f86 <HAL_DMA_Abort_IT>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800167c:	4610      	mov	r0, r2
 800167e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	222a      	movs	r2, #42	; 0x2a
 8001684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2220      	movs	r2, #32
 800168c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016a4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	88fa      	ldrh	r2, [r7, #6]
 80016b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4a17      	ldr	r2, [pc, #92]	; (8001724 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	0c1b      	lsrs	r3, r3, #16
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2208      	movs	r2, #8
 80016fe:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001708:	f248 0102 	movw	r1, #32770	; 0x8002
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f001 f995 	bl	8002a3c <I2C_Enable_IRQ>

    return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
  }
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	0800299b 	.word	0x0800299b
 8001724:	080018cf 	.word	0x080018cf

08001728 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b20      	cmp	r3, #32
 800173a:	d10d      	bne.n	8001758 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2228      	movs	r2, #40	; 0x28
 8001740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_I2C_EnableListen_IT+0x3c>)
 8001748:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800174a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f001 f974 	bl	8002a3c <I2C_Enable_IRQ>

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	080018cf 	.word	0x080018cf

08001768 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	68f9      	ldr	r1, [r7, #12]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
  }
}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00f      	beq.n	80017de <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00a      	beq.n	80017de <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	f043 0201 	orr.w	r2, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017dc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00f      	beq.n	8001808 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00a      	beq.n	8001808 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f043 0208 	orr.w	r2, r3, #8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001806:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00f      	beq.n	8001832 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00a      	beq.n	8001832 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001820:	f043 0202 	orr.w	r2, r3, #2
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001830:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 030b 	and.w	r3, r3, #11
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001842:	68f9      	ldr	r1, [r7, #12]
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 ff6d 	bl	8002724 <I2C_ITError>
  }
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <I2C_Slave_ISR_IT+0x24>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e0e1      	b.n	8001ab6 <I2C_Slave_ISR_IT+0x1e8>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800190e:	6939      	ldr	r1, [r7, #16]
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 fda1 	bl	8002458 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b00      	cmp	r3, #0
 800191e:	d04b      	beq.n	80019b8 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001926:	2b00      	cmp	r3, #0
 8001928:	d046      	beq.n	80019b8 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192e:	b29b      	uxth	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d128      	bne.n	8001986 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b28      	cmp	r3, #40	; 0x28
 800193e:	d108      	bne.n	8001952 <I2C_Slave_ISR_IT+0x84>
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001946:	d104      	bne.n	8001952 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001948:	6939      	ldr	r1, [r7, #16]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 fe96 	bl	800267c <I2C_ITListenCplt>
 8001950:	e031      	b.n	80019b6 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b29      	cmp	r3, #41	; 0x29
 800195c:	d10e      	bne.n	800197c <I2C_Slave_ISR_IT+0xae>
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001964:	d00a      	beq.n	800197c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2210      	movs	r2, #16
 800196c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 ffef 	bl	8002952 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 fc4a 	bl	800220e <I2C_ITSlaveSeqCplt>
 800197a:	e01c      	b.n	80019b6 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2210      	movs	r2, #16
 8001982:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001984:	e08f      	b.n	8001aa6 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2210      	movs	r2, #16
 800198c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f043 0204 	orr.w	r2, r3, #4
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <I2C_Slave_ISR_IT+0xda>
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a6:	d17e      	bne.n	8001aa6 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ac:	4619      	mov	r1, r3
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 feb8 	bl	8002724 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80019b4:	e077      	b.n	8001aa6 <I2C_Slave_ISR_IT+0x1d8>
 80019b6:	e076      	b.n	8001aa6 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d02f      	beq.n	8001a22 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d02a      	beq.n	8001a22 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d018      	beq.n	8001a08 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d14b      	bne.n	8001aaa <I2C_Slave_ISR_IT+0x1dc>
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a18:	d047      	beq.n	8001aaa <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 fbf7 	bl	800220e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001a20:	e043      	b.n	8001aaa <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d009      	beq.n	8001a40 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001a36:	6939      	ldr	r1, [r7, #16]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 fb27 	bl	800208c <I2C_ITAddrCplt>
 8001a3e:	e035      	b.n	8001aac <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d030      	beq.n	8001aac <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d02b      	beq.n	8001aac <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d018      	beq.n	8001a90 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	851a      	strh	r2, [r3, #40]	; 0x28
 8001a8e:	e00d      	b.n	8001aac <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a96:	d002      	beq.n	8001a9e <I2C_Slave_ISR_IT+0x1d0>
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fbb5 	bl	800220e <I2C_ITSlaveSeqCplt>
 8001aa4:	e002      	b.n	8001aac <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001aa6:	bf00      	nop
 8001aa8:	e000      	b.n	8001aac <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001aaa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b088      	sub	sp, #32
 8001ac2:	af02      	add	r7, sp, #8
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <I2C_Master_ISR_DMA+0x1a>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e0d9      	b.n	8001c8c <I2C_Master_ISR_DMA+0x1ce>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d011      	beq.n	8001b18 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2210      	movs	r2, #16
 8001afa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f043 0204 	orr.w	r2, r3, #4
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001b08:	2120      	movs	r1, #32
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 ff96 	bl	8002a3c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 ff1e 	bl	8002952 <I2C_Flush_TXDR>
 8001b16:	e0b4      	b.n	8001c82 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d071      	beq.n	8001c06 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d06c      	beq.n	8001c06 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b3a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d04e      	beq.n	8001be4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b52:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2bff      	cmp	r3, #255	; 0xff
 8001b5c:	d906      	bls.n	8001b6c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	22ff      	movs	r2, #255	; 0xff
 8001b62:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e010      	b.n	8001b8e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b7e:	d003      	beq.n	8001b88 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e002      	b.n	8001b8e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	8a79      	ldrh	r1, [r7, #18]
 8001b96:	2300      	movs	r3, #0
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 ff1b 	bl	80029d8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b22      	cmp	r3, #34	; 0x22
 8001bbe:	d108      	bne.n	8001bd2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001bd0:	e057      	b.n	8001c82 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001be0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001be2:	e04e      	b.n	8001c82 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bf2:	d003      	beq.n	8001bfc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 facd 	bl	8002194 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001bfa:	e042      	b.n	8001c82 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001bfc:	2140      	movs	r1, #64	; 0x40
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 fd90 	bl	8002724 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001c04:	e03d      	b.n	8001c82 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d028      	beq.n	8001c62 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d023      	beq.n	8001c62 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d119      	bne.n	8001c58 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c32:	d025      	beq.n	8001c80 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c3c:	d108      	bne.n	8001c50 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c4c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001c4e:	e017      	b.n	8001c80 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 fa9f 	bl	8002194 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001c56:	e013      	b.n	8001c80 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001c58:	2140      	movs	r1, #64	; 0x40
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fd62 	bl	8002724 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001c60:	e00e      	b.n	8001c80 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00a      	beq.n	8001c82 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001c76:	68b9      	ldr	r1, [r7, #8]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 fb25 	bl	80022c8 <I2C_ITMasterCplt>
 8001c7e:	e000      	b.n	8001c82 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8001c80:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001ca0:	4b8d      	ldr	r3, [pc, #564]	; (8001ed8 <I2C_Mem_ISR_DMA+0x244>)
 8001ca2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <I2C_Mem_ISR_DMA+0x1e>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e10e      	b.n	8001ed0 <I2C_Mem_ISR_DMA+0x23c>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d016      	beq.n	8001cf2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d011      	beq.n	8001cf2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f043 0204 	orr.w	r2, r3, #4
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001ce2:	2120      	movs	r1, #32
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 fea9 	bl	8002a3c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 fe31 	bl	8002952 <I2C_Flush_TXDR>
 8001cf0:	e0e9      	b.n	8001ec6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00e      	beq.n	8001d1a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f04f 32ff 	mov.w	r2, #4294967295
 8001d16:	651a      	str	r2, [r3, #80]	; 0x50
 8001d18:	e0d5      	b.n	8001ec6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d05f      	beq.n	8001de4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d05a      	beq.n	8001de4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d2e:	2101      	movs	r1, #1
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 ff07 	bl	8002b44 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001d36:	2110      	movs	r1, #16
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fe7f 	bl	8002a3c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d048      	beq.n	8001dda <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2bff      	cmp	r3, #255	; 0xff
 8001d50:	d910      	bls.n	8001d74 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	22ff      	movs	r2, #255	; 0xff
 8001d56:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fe33 	bl	80029d8 <I2C_TransferConfig>
 8001d72:	e011      	b.n	8001d98 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	b299      	uxth	r1, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fe20 	bl	80029d8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b22      	cmp	r3, #34	; 0x22
 8001db4:	d108      	bne.n	8001dc8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dc4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001dc6:	e07e      	b.n	8001ec6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dd6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001dd8:	e075      	b.n	8001ec6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001dda:	2140      	movs	r1, #64	; 0x40
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 fca1 	bl	8002724 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001de2:	e070      	b.n	8001ec6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d05d      	beq.n	8001eaa <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d058      	beq.n	8001eaa <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001df8:	2101      	movs	r1, #1
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fea2 	bl	8002b44 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001e00:	2110      	movs	r1, #16
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fe1a 	bl	8002a3c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b22      	cmp	r3, #34	; 0x22
 8001e12:	d101      	bne.n	8001e18 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <I2C_Mem_ISR_DMA+0x248>)
 8001e16:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	d910      	bls.n	8001e44 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	22ff      	movs	r2, #255	; 0xff
 8001e26:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2c:	b299      	uxth	r1, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 fdcb 	bl	80029d8 <I2C_TransferConfig>
 8001e42:	e011      	b.n	8001e68 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	b299      	uxth	r1, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fdb8 	bl	80029d8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b22      	cmp	r3, #34	; 0x22
 8001e84:	d108      	bne.n	8001e98 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e94:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e96:	e016      	b.n	8001ec6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ea6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ea8:	e00d      	b.n	8001ec6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fa01 	bl	80022c8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	80002000 	.word	0x80002000
 8001edc:	80002400 	.word	0x80002400

08001ee0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <I2C_Slave_ISR_DMA+0x24>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e0bf      	b.n	8002084 <I2C_Slave_ISR_DMA+0x1a4>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 fa98 	bl	8002458 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8095 	beq.w	800205e <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 808f 	beq.w	800205e <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d104      	bne.n	8001f54 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d07d      	beq.n	8002050 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00c      	beq.n	8001f76 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00c      	beq.n	8001f98 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8001f94:	2301      	movs	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d128      	bne.n	8001ff0 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b28      	cmp	r3, #40	; 0x28
 8001fa8:	d108      	bne.n	8001fbc <I2C_Slave_ISR_DMA+0xdc>
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fb0:	d104      	bne.n	8001fbc <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fb61 	bl	800267c <I2C_ITListenCplt>
 8001fba:	e048      	b.n	800204e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b29      	cmp	r3, #41	; 0x29
 8001fc6:	d10e      	bne.n	8001fe6 <I2C_Slave_ISR_DMA+0x106>
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fce:	d00a      	beq.n	8001fe6 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fcba 	bl	8002952 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f915 	bl	800220e <I2C_ITSlaveSeqCplt>
 8001fe4:	e033      	b.n	800204e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2210      	movs	r2, #16
 8001fec:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001fee:	e034      	b.n	800205a <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	f043 0204 	orr.w	r2, r3, #4
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800200a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <I2C_Slave_ISR_DMA+0x13a>
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002018:	d11f      	bne.n	800205a <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800201a:	7dfb      	ldrb	r3, [r7, #23]
 800201c:	2b21      	cmp	r3, #33	; 0x21
 800201e:	d002      	beq.n	8002026 <I2C_Slave_ISR_DMA+0x146>
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	2b29      	cmp	r3, #41	; 0x29
 8002024:	d103      	bne.n	800202e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2221      	movs	r2, #33	; 0x21
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
 800202c:	e008      	b.n	8002040 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800202e:	7dfb      	ldrb	r3, [r7, #23]
 8002030:	2b22      	cmp	r3, #34	; 0x22
 8002032:	d002      	beq.n	800203a <I2C_Slave_ISR_DMA+0x15a>
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	2b2a      	cmp	r3, #42	; 0x2a
 8002038:	d102      	bne.n	8002040 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2222      	movs	r2, #34	; 0x22
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	4619      	mov	r1, r3
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fb6c 	bl	8002724 <I2C_ITError>
      if (treatdmanack == 1U)
 800204c:	e005      	b.n	800205a <I2C_Slave_ISR_DMA+0x17a>
 800204e:	e004      	b.n	800205a <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2210      	movs	r2, #16
 8002056:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002058:	e00f      	b.n	800207a <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 800205a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800205c:	e00d      	b.n	800207a <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f809 	bl	800208c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020a2:	2b28      	cmp	r3, #40	; 0x28
 80020a4:	d16a      	bne.n	800217c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80020c4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80020e0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d138      	bne.n	800215c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80020ea:	897b      	ldrh	r3, [r7, #10]
 80020ec:	09db      	lsrs	r3, r3, #7
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	89bb      	ldrh	r3, [r7, #12]
 80020f2:	4053      	eors	r3, r2
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f003 0306 	and.w	r3, r3, #6
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d11c      	bne.n	8002138 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80020fe:	897b      	ldrh	r3, [r7, #10]
 8002100:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002110:	2b02      	cmp	r3, #2
 8002112:	d13b      	bne.n	800218c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2208      	movs	r2, #8
 8002120:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800212a:	89ba      	ldrh	r2, [r7, #12]
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7fe fbb5 	bl	80008a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002136:	e029      	b.n	800218c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002138:	893b      	ldrh	r3, [r7, #8]
 800213a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800213c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fcff 	bl	8002b44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800214e:	89ba      	ldrh	r2, [r7, #12]
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	4619      	mov	r1, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7fe fba3 	bl	80008a0 <HAL_I2C_AddrCallback>
}
 800215a:	e017      	b.n	800218c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800215c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fcef 	bl	8002b44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800216e:	89ba      	ldrh	r2, [r7, #12]
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7fe fb93 	bl	80008a0 <HAL_I2C_AddrCallback>
}
 800217a:	e007      	b.n	800218c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2208      	movs	r2, #8
 8002182:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b21      	cmp	r3, #33	; 0x21
 80021ae:	d115      	bne.n	80021dc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2211      	movs	r2, #17
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80021c4:	2101      	movs	r1, #1
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fcbc 	bl	8002b44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff fb3c 	bl	8001852 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021da:	e014      	b.n	8002206 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2212      	movs	r2, #18
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80021f0:	2102      	movs	r1, #2
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fca6 	bl	8002b44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fb30 	bl	8001866 <HAL_I2C_MasterRxCpltCallback>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e00c      	b.n	800225c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800225a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b29      	cmp	r3, #41	; 0x29
 8002266:	d112      	bne.n	800228e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2228      	movs	r2, #40	; 0x28
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2221      	movs	r2, #33	; 0x21
 8002274:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002276:	2101      	movs	r1, #1
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fc63 	bl	8002b44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fa7e 	bl	8000788 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800228c:	e017      	b.n	80022be <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b2a      	cmp	r3, #42	; 0x2a
 8002298:	d111      	bne.n	80022be <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2228      	movs	r2, #40	; 0x28
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2222      	movs	r2, #34	; 0x22
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80022a8:	2102      	movs	r1, #2
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fc4a 	bl	8002b44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7fe fa75 	bl	80007a8 <HAL_I2C_SlaveRxCpltCallback>
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2220      	movs	r2, #32
 80022dc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b21      	cmp	r3, #33	; 0x21
 80022e8:	d107      	bne.n	80022fa <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80022ea:	2101      	movs	r1, #1
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fc29 	bl	8002b44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2211      	movs	r2, #17
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
 80022f8:	e00c      	b.n	8002314 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b22      	cmp	r3, #34	; 0x22
 8002304:	d106      	bne.n	8002314 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002306:	2102      	movs	r1, #2
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fc1b 	bl	8002b44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2212      	movs	r2, #18
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6859      	ldr	r1, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <I2C_ITMasterCplt+0x188>)
 8002320:	400b      	ands	r3, r1
 8002322:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a49      	ldr	r2, [pc, #292]	; (8002454 <I2C_ITMasterCplt+0x18c>)
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2210      	movs	r2, #16
 8002340:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f043 0204 	orr.w	r2, r3, #4
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b60      	cmp	r3, #96	; 0x60
 8002358:	d10a      	bne.n	8002370 <I2C_ITMasterCplt+0xa8>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	b2db      	uxtb	r3, r3
 800236c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800236e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 faee 	bl	8002952 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b60      	cmp	r3, #96	; 0x60
 8002386:	d002      	beq.n	800238e <I2C_ITMasterCplt+0xc6>
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f9c5 	bl	8002724 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800239a:	e054      	b.n	8002446 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b21      	cmp	r3, #33	; 0x21
 80023a6:	d124      	bne.n	80023f2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b40      	cmp	r3, #64	; 0x40
 80023c0:	d10b      	bne.n	80023da <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fa51 	bl	800187a <HAL_I2C_MemTxCpltCallback>
}
 80023d8:	e035      	b.n	8002446 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff fa31 	bl	8001852 <HAL_I2C_MasterTxCpltCallback>
}
 80023f0:	e029      	b.n	8002446 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b22      	cmp	r3, #34	; 0x22
 80023fc:	d123      	bne.n	8002446 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b40      	cmp	r3, #64	; 0x40
 8002416:	d10b      	bne.n	8002430 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff fa30 	bl	800188e <HAL_I2C_MemRxCpltCallback>
}
 800242e:	e00a      	b.n	8002446 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff fa10 	bl	8001866 <HAL_I2C_MasterRxCpltCallback>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	fe00e800 	.word	0xfe00e800
 8002454:	ffff0000 	.word	0xffff0000

08002458 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002474:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2220      	movs	r2, #32
 800247c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	2b21      	cmp	r3, #33	; 0x21
 8002482:	d002      	beq.n	800248a <I2C_ITSlaveCplt+0x32>
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b29      	cmp	r3, #41	; 0x29
 8002488:	d108      	bne.n	800249c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800248a:	f248 0101 	movw	r1, #32769	; 0x8001
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fb58 	bl	8002b44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2221      	movs	r2, #33	; 0x21
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
 800249a:	e019      	b.n	80024d0 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b22      	cmp	r3, #34	; 0x22
 80024a0:	d002      	beq.n	80024a8 <I2C_ITSlaveCplt+0x50>
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	2b2a      	cmp	r3, #42	; 0x2a
 80024a6:	d108      	bne.n	80024ba <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80024a8:	f248 0102 	movw	r1, #32770	; 0x8002
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fb49 	bl	8002b44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2222      	movs	r2, #34	; 0x22
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
 80024b8:	e00a      	b.n	80024d0 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	2b28      	cmp	r3, #40	; 0x28
 80024be:	d107      	bne.n	80024d0 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80024c0:	f248 0103 	movw	r1, #32771	; 0x8003
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fb3d 	bl	8002b44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b62      	ldr	r3, [pc, #392]	; (8002674 <I2C_ITSlaveCplt+0x21c>)
 80024ec:	400b      	ands	r3, r1
 80024ee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fa2e 	bl	8002952 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800250e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01f      	beq.n	8002558 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	b29a      	uxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002526:	e017      	b.n	8002558 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d012      	beq.n	8002558 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002540:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	b29a      	uxth	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d020      	beq.n	80025a4 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00c      	beq.n	80025a4 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f043 0204 	orr.w	r2, r3, #4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d010      	beq.n	80025f2 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	4619      	mov	r1, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8a4 	bl	8002724 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b28      	cmp	r3, #40	; 0x28
 80025e6:	d141      	bne.n	800266c <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80025e8:	6979      	ldr	r1, [r7, #20]
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f846 	bl	800267c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80025f0:	e03c      	b.n	800266c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025fa:	d014      	beq.n	8002626 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff fe06 	bl	800220e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <I2C_ITSlaveCplt+0x220>)
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe f978 	bl	8000914 <HAL_I2C_ListenCpltCallback>
}
 8002624:	e022      	b.n	800266c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b22      	cmp	r3, #34	; 0x22
 8002630:	d10e      	bne.n	8002650 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7fe f8ad 	bl	80007a8 <HAL_I2C_SlaveRxCpltCallback>
}
 800264e:	e00d      	b.n	800266c <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe f88e 	bl	8000788 <HAL_I2C_SlaveTxCpltCallback>
}
 800266c:	bf00      	nop
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	fe00e800 	.word	0xfe00e800
 8002678:	ffff0000 	.word	0xffff0000

0800267c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a25      	ldr	r2, [pc, #148]	; (8002720 <I2C_ITListenCplt+0xa4>)
 800268a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d022      	beq.n	80026f8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d012      	beq.n	80026f8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026f8:	f248 0103 	movw	r1, #32771	; 0x8003
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fa21 	bl	8002b44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2210      	movs	r2, #16
 8002708:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe f8fe 	bl	8000914 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	ffff0000 	.word	0xffff0000

08002724 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002734:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a6d      	ldr	r2, [pc, #436]	; (80028f8 <I2C_ITError+0x1d4>)
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	2b28      	cmp	r3, #40	; 0x28
 800275a:	d005      	beq.n	8002768 <I2C_ITError+0x44>
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b29      	cmp	r3, #41	; 0x29
 8002760:	d002      	beq.n	8002768 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b2a      	cmp	r3, #42	; 0x2a
 8002766:	d10b      	bne.n	8002780 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002768:	2103      	movs	r1, #3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f9ea 	bl	8002b44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2228      	movs	r2, #40	; 0x28
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a60      	ldr	r2, [pc, #384]	; (80028fc <I2C_ITError+0x1d8>)
 800277c:	635a      	str	r2, [r3, #52]	; 0x34
 800277e:	e030      	b.n	80027e2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002780:	f248 0103 	movw	r1, #32771	; 0x8003
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f9dd 	bl	8002b44 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f8e1 	bl	8002952 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b60      	cmp	r3, #96	; 0x60
 800279a:	d01f      	beq.n	80027dc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d114      	bne.n	80027dc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d109      	bne.n	80027d4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2210      	movs	r2, #16
 80027c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	f043 0204 	orr.w	r2, r3, #4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2220      	movs	r2, #32
 80027da:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d039      	beq.n	8002864 <I2C_ITError+0x140>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b11      	cmp	r3, #17
 80027f4:	d002      	beq.n	80027fc <I2C_ITError+0xd8>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b21      	cmp	r3, #33	; 0x21
 80027fa:	d133      	bne.n	8002864 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800280a:	d107      	bne.n	800281c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800281a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fbf1 	bl	8001008 <HAL_DMA_GetState>
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d017      	beq.n	800285c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	4a33      	ldr	r2, [pc, #204]	; (8002900 <I2C_ITError+0x1dc>)
 8002832:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fba0 	bl	8000f86 <HAL_DMA_Abort_IT>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d04d      	beq.n	80028e8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002856:	4610      	mov	r0, r2
 8002858:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800285a:	e045      	b.n	80028e8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f851 	bl	8002904 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002862:	e041      	b.n	80028e8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d039      	beq.n	80028e0 <I2C_ITError+0x1bc>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b12      	cmp	r3, #18
 8002870:	d002      	beq.n	8002878 <I2C_ITError+0x154>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b22      	cmp	r3, #34	; 0x22
 8002876:	d133      	bne.n	80028e0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002886:	d107      	bne.n	8002898 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002896:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fbb3 	bl	8001008 <HAL_DMA_GetState>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d017      	beq.n	80028d8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <I2C_ITError+0x1dc>)
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fb62 	bl	8000f86 <HAL_DMA_Abort_IT>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d011      	beq.n	80028ec <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028d2:	4610      	mov	r0, r2
 80028d4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028d6:	e009      	b.n	80028ec <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f813 	bl	8002904 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028de:	e005      	b.n	80028ec <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f80f 	bl	8002904 <I2C_TreatErrorCallback>
  }
}
 80028e6:	e002      	b.n	80028ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028e8:	bf00      	nop
 80028ea:	e000      	b.n	80028ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028ec:	bf00      	nop
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	ffff0000 	.word	0xffff0000
 80028fc:	080018cf 	.word	0x080018cf
 8002900:	0800299b 	.word	0x0800299b

08002904 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b60      	cmp	r3, #96	; 0x60
 8002916:	d10e      	bne.n	8002936 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe ffb7 	bl	80018a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002934:	e009      	b.n	800294a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fd ffef 	bl	8000928 <HAL_I2C_ErrorCallback>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b02      	cmp	r3, #2
 8002966:	d103      	bne.n	8002970 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2200      	movs	r2, #0
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d007      	beq.n	800298e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	619a      	str	r2, [r3, #24]
  }
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b4:	2200      	movs	r2, #0
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c4:	2200      	movs	r2, #0
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff ff9b 	bl	8002904 <I2C_TreatErrorCallback>
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	817b      	strh	r3, [r7, #10]
 80029e6:	4613      	mov	r3, r2
 80029e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029ea:	897b      	ldrh	r3, [r7, #10]
 80029ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029f0:	7a7b      	ldrb	r3, [r7, #9]
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	0d5b      	lsrs	r3, r3, #21
 8002a12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <I2C_TransferConfig+0x60>)
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	ea02 0103 	and.w	r1, r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	03ff63ff 	.word	0x03ff63ff

08002a3c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a50:	4a39      	ldr	r2, [pc, #228]	; (8002b38 <I2C_Enable_IRQ+0xfc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d032      	beq.n	8002abc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002a5a:	4a38      	ldr	r2, [pc, #224]	; (8002b3c <I2C_Enable_IRQ+0x100>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d02d      	beq.n	8002abc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002a64:	4a36      	ldr	r2, [pc, #216]	; (8002b40 <I2C_Enable_IRQ+0x104>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d028      	beq.n	8002abc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002a6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	da03      	bge.n	8002a7a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002a78:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002a8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002a8c:	887b      	ldrh	r3, [r7, #2]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002a9c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d103      	bne.n	8002aac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002aaa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d133      	bne.n	8002b1a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f043 0320 	orr.w	r3, r3, #32
 8002ab8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002aba:	e02e      	b.n	8002b1a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002abc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	da03      	bge.n	8002acc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002aca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002adc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002ade:	887b      	ldrh	r3, [r7, #2]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002aee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d103      	bne.n	8002afe <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002afc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d103      	bne.n	8002b0c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b0a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002b0c:	887b      	ldrh	r3, [r7, #2]
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d103      	bne.n	8002b1a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b18:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6819      	ldr	r1, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	08001abf 	.word	0x08001abf
 8002b3c:	08001ee1 	.word	0x08001ee1
 8002b40:	08001c95 	.word	0x08001c95

08002b44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00f      	beq.n	8002b7e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002b64:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b72:	2b28      	cmp	r3, #40	; 0x28
 8002b74:	d003      	beq.n	8002b7e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002b7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00f      	beq.n	8002ba8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002b8e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b9c:	2b28      	cmp	r3, #40	; 0x28
 8002b9e:	d003      	beq.n	8002ba8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002ba6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002ba8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	da03      	bge.n	8002bb8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002bb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d103      	bne.n	8002bc6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002bc4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002bc6:	887b      	ldrh	r3, [r7, #2]
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d103      	bne.n	8002bd4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f043 0320 	orr.w	r3, r3, #32
 8002bd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002bd4:	887b      	ldrh	r3, [r7, #2]
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	d103      	bne.n	8002be2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	43da      	mvns	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d138      	bne.n	8002c88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e032      	b.n	8002c8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2224      	movs	r2, #36	; 0x24
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6819      	ldr	r1, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e000      	b.n	8002c8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
  }
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d139      	bne.n	8002d20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e033      	b.n	8002d22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2224      	movs	r2, #36	; 0x24
 8002cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ce8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40007000 	.word	0x40007000

08002d50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40007000 	.word	0x40007000

08002d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d7a:	d130      	bne.n	8002dde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d7c:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d88:	d038      	beq.n	8002dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2232      	movs	r2, #50	; 0x32
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	4a1b      	ldr	r2, [pc, #108]	; (8002e14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0c9b      	lsrs	r3, r3, #18
 8002dac:	3301      	adds	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002db0:	e002      	b.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002db8:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc4:	d102      	bne.n	8002dcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f2      	bne.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd8:	d110      	bne.n	8002dfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e00f      	b.n	8002dfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dde:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dea:	d007      	beq.n	8002dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dec:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002df4:	4a05      	ldr	r2, [pc, #20]	; (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	20000000 	.word	0x20000000
 8002e14:	431bde83 	.word	0x431bde83

08002e18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f000 bc02 	b.w	8003630 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e2c:	4b96      	ldr	r3, [pc, #600]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e36:	4b94      	ldr	r3, [pc, #592]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80e4 	beq.w	8003016 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <HAL_RCC_OscConfig+0x4c>
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b0c      	cmp	r3, #12
 8002e58:	f040 808b 	bne.w	8002f72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 8087 	bne.w	8002f72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e64:	4b88      	ldr	r3, [pc, #544]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_OscConfig+0x64>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e3d9      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1a      	ldr	r2, [r3, #32]
 8002e80:	4b81      	ldr	r3, [pc, #516]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <HAL_RCC_OscConfig+0x7e>
 8002e8c:	4b7e      	ldr	r3, [pc, #504]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e94:	e005      	b.n	8002ea2 <HAL_RCC_OscConfig+0x8a>
 8002e96:	4b7c      	ldr	r3, [pc, #496]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d223      	bcs.n	8002eee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fd8c 	bl	80039c8 <RCC_SetFlashLatencyFromMSIRange>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e3ba      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eba:	4b73      	ldr	r3, [pc, #460]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a72      	ldr	r2, [pc, #456]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	f043 0308 	orr.w	r3, r3, #8
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b70      	ldr	r3, [pc, #448]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	496d      	ldr	r1, [pc, #436]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ed8:	4b6b      	ldr	r3, [pc, #428]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	4968      	ldr	r1, [pc, #416]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
 8002eec:	e025      	b.n	8002f3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eee:	4b66      	ldr	r3, [pc, #408]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a65      	ldr	r2, [pc, #404]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	f043 0308 	orr.w	r3, r3, #8
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b63      	ldr	r3, [pc, #396]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4960      	ldr	r1, [pc, #384]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f0c:	4b5e      	ldr	r3, [pc, #376]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	495b      	ldr	r1, [pc, #364]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fd4c 	bl	80039c8 <RCC_SetFlashLatencyFromMSIRange>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e37a      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f3a:	f000 fc81 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	4b51      	ldr	r3, [pc, #324]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	4950      	ldr	r1, [pc, #320]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f4c:	5ccb      	ldrb	r3, [r1, r3]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	4a4e      	ldr	r2, [pc, #312]	; (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f5a:	4b4e      	ldr	r3, [pc, #312]	; (8003094 <HAL_RCC_OscConfig+0x27c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd fe80 	bl	8000c64 <HAL_InitTick>
 8002f64:	4603      	mov	r3, r0
 8002f66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d052      	beq.n	8003014 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	e35e      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d032      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f7a:	4b43      	ldr	r3, [pc, #268]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a42      	ldr	r2, [pc, #264]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f86:	f7fd febd 	bl	8000d04 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f8e:	f7fd feb9 	bl	8000d04 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e347      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fa0:	4b39      	ldr	r3, [pc, #228]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fac:	4b36      	ldr	r3, [pc, #216]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a35      	ldr	r2, [pc, #212]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	f043 0308 	orr.w	r3, r3, #8
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b33      	ldr	r3, [pc, #204]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4930      	ldr	r1, [pc, #192]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fca:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	492b      	ldr	r1, [pc, #172]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
 8002fde:	e01a      	b.n	8003016 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fe0:	4b29      	ldr	r3, [pc, #164]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a28      	ldr	r2, [pc, #160]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fec:	f7fd fe8a 	bl	8000d04 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff4:	f7fd fe86 	bl	8000d04 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e314      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x1dc>
 8003012:	e000      	b.n	8003016 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003014:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d073      	beq.n	800310a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d005      	beq.n	8003034 <HAL_RCC_OscConfig+0x21c>
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d10e      	bne.n	800304c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d10b      	bne.n	800304c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	4b14      	ldr	r3, [pc, #80]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d063      	beq.n	8003108 <HAL_RCC_OscConfig+0x2f0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d15f      	bne.n	8003108 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e2f1      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x24c>
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e025      	b.n	80030b0 <HAL_RCC_OscConfig+0x298>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800306c:	d114      	bne.n	8003098 <HAL_RCC_OscConfig+0x280>
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a05      	ldr	r2, [pc, #20]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a02      	ldr	r2, [pc, #8]	; (8003088 <HAL_RCC_OscConfig+0x270>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e013      	b.n	80030b0 <HAL_RCC_OscConfig+0x298>
 8003088:	40021000 	.word	0x40021000
 800308c:	08004a6c 	.word	0x08004a6c
 8003090:	20000000 	.word	0x20000000
 8003094:	20000004 	.word	0x20000004
 8003098:	4ba0      	ldr	r3, [pc, #640]	; (800331c <HAL_RCC_OscConfig+0x504>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a9f      	ldr	r2, [pc, #636]	; (800331c <HAL_RCC_OscConfig+0x504>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b9d      	ldr	r3, [pc, #628]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a9c      	ldr	r2, [pc, #624]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fd fe24 	bl	8000d04 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fd fe20 	bl	8000d04 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e2ae      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d2:	4b92      	ldr	r3, [pc, #584]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x2a8>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fd fe10 	bl	8000d04 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fd fe0c 	bl	8000d04 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e29a      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030fa:	4b88      	ldr	r3, [pc, #544]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x2d0>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d060      	beq.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d005      	beq.n	8003128 <HAL_RCC_OscConfig+0x310>
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d119      	bne.n	8003156 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d116      	bne.n	8003156 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003128:	4b7c      	ldr	r3, [pc, #496]	; (800331c <HAL_RCC_OscConfig+0x504>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_OscConfig+0x328>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e277      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003140:	4b76      	ldr	r3, [pc, #472]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	061b      	lsls	r3, r3, #24
 800314e:	4973      	ldr	r1, [pc, #460]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003150:	4313      	orrs	r3, r2
 8003152:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003154:	e040      	b.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d023      	beq.n	80031a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800315e:	4b6f      	ldr	r3, [pc, #444]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6e      	ldr	r2, [pc, #440]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fd fdcb 	bl	8000d04 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003172:	f7fd fdc7 	bl	8000d04 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e255      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003184:	4b65      	ldr	r3, [pc, #404]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b62      	ldr	r3, [pc, #392]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	495f      	ldr	r1, [pc, #380]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
 80031a4:	e018      	b.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b5d      	ldr	r3, [pc, #372]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a5c      	ldr	r2, [pc, #368]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80031ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7fd fda7 	bl	8000d04 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ba:	f7fd fda3 	bl	8000d04 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e231      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031cc:	4b53      	ldr	r3, [pc, #332]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d03c      	beq.n	800325e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01c      	beq.n	8003226 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ec:	4b4b      	ldr	r3, [pc, #300]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80031ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f2:	4a4a      	ldr	r2, [pc, #296]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7fd fd82 	bl	8000d04 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003204:	f7fd fd7e 	bl	8000d04 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e20c      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003216:	4b41      	ldr	r3, [pc, #260]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ef      	beq.n	8003204 <HAL_RCC_OscConfig+0x3ec>
 8003224:	e01b      	b.n	800325e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003226:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800322c:	4a3b      	ldr	r2, [pc, #236]	; (800331c <HAL_RCC_OscConfig+0x504>)
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003236:	f7fd fd65 	bl	8000d04 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323e:	f7fd fd61 	bl	8000d04 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e1ef      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003250:	4b32      	ldr	r3, [pc, #200]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ef      	bne.n	800323e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80a6 	beq.w	80033b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326c:	2300      	movs	r3, #0
 800326e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003270:	4b2a      	ldr	r3, [pc, #168]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10d      	bne.n	8003298 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327c:	4b27      	ldr	r3, [pc, #156]	; (800331c <HAL_RCC_OscConfig+0x504>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	4a26      	ldr	r2, [pc, #152]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003286:	6593      	str	r3, [r2, #88]	; 0x58
 8003288:	4b24      	ldr	r3, [pc, #144]	; (800331c <HAL_RCC_OscConfig+0x504>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003294:	2301      	movs	r3, #1
 8003296:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_RCC_OscConfig+0x508>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d118      	bne.n	80032d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a4:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <HAL_RCC_OscConfig+0x508>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <HAL_RCC_OscConfig+0x508>)
 80032aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b0:	f7fd fd28 	bl	8000d04 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b8:	f7fd fd24 	bl	8000d04 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1b2      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <HAL_RCC_OscConfig+0x508>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d108      	bne.n	80032f0 <HAL_RCC_OscConfig+0x4d8>
 80032de:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	4a0d      	ldr	r2, [pc, #52]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ee:	e029      	b.n	8003344 <HAL_RCC_OscConfig+0x52c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d115      	bne.n	8003324 <HAL_RCC_OscConfig+0x50c>
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_RCC_OscConfig+0x504>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	4a07      	ldr	r2, [pc, #28]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <HAL_RCC_OscConfig+0x504>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	4a03      	ldr	r2, [pc, #12]	; (800331c <HAL_RCC_OscConfig+0x504>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003318:	e014      	b.n	8003344 <HAL_RCC_OscConfig+0x52c>
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	40007000 	.word	0x40007000
 8003324:	4b9a      	ldr	r3, [pc, #616]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	4a99      	ldr	r2, [pc, #612]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003334:	4b96      	ldr	r3, [pc, #600]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	4a95      	ldr	r2, [pc, #596]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d016      	beq.n	800337a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fd fcda 	bl	8000d04 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fd fcd6 	bl	8000d04 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e162      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800336a:	4b89      	ldr	r3, [pc, #548]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ed      	beq.n	8003354 <HAL_RCC_OscConfig+0x53c>
 8003378:	e015      	b.n	80033a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fd fcc3 	bl	8000d04 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd fcbf 	bl	8000d04 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e14b      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003398:	4b7d      	ldr	r3, [pc, #500]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1ed      	bne.n	8003382 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033a6:	7ffb      	ldrb	r3, [r7, #31]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d105      	bne.n	80033b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ac:	4b78      	ldr	r3, [pc, #480]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	4a77      	ldr	r2, [pc, #476]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 80033b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d03c      	beq.n	800343e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01c      	beq.n	8003406 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033cc:	4b70      	ldr	r3, [pc, #448]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 80033ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033d2:	4a6f      	ldr	r2, [pc, #444]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fd fc92 	bl	8000d04 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e4:	f7fd fc8e 	bl	8000d04 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e11c      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033f6:	4b66      	ldr	r3, [pc, #408]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 80033f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ef      	beq.n	80033e4 <HAL_RCC_OscConfig+0x5cc>
 8003404:	e01b      	b.n	800343e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003406:	4b62      	ldr	r3, [pc, #392]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 8003408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800340c:	4a60      	ldr	r2, [pc, #384]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fd fc75 	bl	8000d04 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800341e:	f7fd fc71 	bl	8000d04 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0ff      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003430:	4b57      	ldr	r3, [pc, #348]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 8003432:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1ef      	bne.n	800341e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80f3 	beq.w	800362e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	2b02      	cmp	r3, #2
 800344e:	f040 80c9 	bne.w	80035e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003452:	4b4f      	ldr	r3, [pc, #316]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0203 	and.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	429a      	cmp	r2, r3
 8003464:	d12c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	3b01      	subs	r3, #1
 8003472:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d123      	bne.n	80034c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003482:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d11b      	bne.n	80034c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d113      	bne.n	80034c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	3b01      	subs	r3, #1
 80034a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d109      	bne.n	80034c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	3b01      	subs	r3, #1
 80034ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d06b      	beq.n	8003598 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b0c      	cmp	r3, #12
 80034c4:	d062      	beq.n	800358c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034c6:	4b32      	ldr	r3, [pc, #200]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0ac      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034d6:	4b2e      	ldr	r3, [pc, #184]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a2d      	ldr	r2, [pc, #180]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 80034dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e2:	f7fd fc0f 	bl	8000d04 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fd fc0b 	bl	8000d04 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e099      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fc:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f0      	bne.n	80034ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003508:	4b21      	ldr	r3, [pc, #132]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_RCC_OscConfig+0x77c>)
 800350e:	4013      	ands	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003518:	3a01      	subs	r2, #1
 800351a:	0112      	lsls	r2, r2, #4
 800351c:	4311      	orrs	r1, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003522:	0212      	lsls	r2, r2, #8
 8003524:	4311      	orrs	r1, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800352a:	0852      	lsrs	r2, r2, #1
 800352c:	3a01      	subs	r2, #1
 800352e:	0552      	lsls	r2, r2, #21
 8003530:	4311      	orrs	r1, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003536:	0852      	lsrs	r2, r2, #1
 8003538:	3a01      	subs	r2, #1
 800353a:	0652      	lsls	r2, r2, #25
 800353c:	4311      	orrs	r1, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003542:	06d2      	lsls	r2, r2, #27
 8003544:	430a      	orrs	r2, r1
 8003546:	4912      	ldr	r1, [pc, #72]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 8003548:	4313      	orrs	r3, r2
 800354a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0f      	ldr	r2, [pc, #60]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 8003552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003556:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a0c      	ldr	r2, [pc, #48]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 800355e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003562:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003564:	f7fd fbce 	bl	8000d04 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356c:	f7fd fbca 	bl	8000d04 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e058      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357e:	4b04      	ldr	r3, [pc, #16]	; (8003590 <HAL_RCC_OscConfig+0x778>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800358a:	e050      	b.n	800362e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e04f      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
 8003590:	40021000 	.word	0x40021000
 8003594:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003598:	4b27      	ldr	r3, [pc, #156]	; (8003638 <HAL_RCC_OscConfig+0x820>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d144      	bne.n	800362e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035a4:	4b24      	ldr	r3, [pc, #144]	; (8003638 <HAL_RCC_OscConfig+0x820>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a23      	ldr	r2, [pc, #140]	; (8003638 <HAL_RCC_OscConfig+0x820>)
 80035aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035b0:	4b21      	ldr	r3, [pc, #132]	; (8003638 <HAL_RCC_OscConfig+0x820>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a20      	ldr	r2, [pc, #128]	; (8003638 <HAL_RCC_OscConfig+0x820>)
 80035b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035bc:	f7fd fba2 	bl	8000d04 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fd fb9e 	bl	8000d04 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e02c      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d6:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_RCC_OscConfig+0x820>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x7ac>
 80035e2:	e024      	b.n	800362e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b0c      	cmp	r3, #12
 80035e8:	d01f      	beq.n	800362a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b13      	ldr	r3, [pc, #76]	; (8003638 <HAL_RCC_OscConfig+0x820>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a12      	ldr	r2, [pc, #72]	; (8003638 <HAL_RCC_OscConfig+0x820>)
 80035f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fd fb85 	bl	8000d04 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fd fb81 	bl	8000d04 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e00f      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003610:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_RCC_OscConfig+0x820>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800361c:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_OscConfig+0x820>)
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4905      	ldr	r1, [pc, #20]	; (8003638 <HAL_RCC_OscConfig+0x820>)
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_OscConfig+0x824>)
 8003624:	4013      	ands	r3, r2
 8003626:	60cb      	str	r3, [r1, #12]
 8003628:	e001      	b.n	800362e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3720      	adds	r7, #32
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	feeefffc 	.word	0xfeeefffc

08003640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0e7      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b75      	ldr	r3, [pc, #468]	; (800382c <HAL_RCC_ClockConfig+0x1ec>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b72      	ldr	r3, [pc, #456]	; (800382c <HAL_RCC_ClockConfig+0x1ec>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4970      	ldr	r1, [pc, #448]	; (800382c <HAL_RCC_ClockConfig+0x1ec>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b6e      	ldr	r3, [pc, #440]	; (800382c <HAL_RCC_ClockConfig+0x1ec>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0cf      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d010      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	4b66      	ldr	r3, [pc, #408]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800369c:	429a      	cmp	r2, r3
 800369e:	d908      	bls.n	80036b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a0:	4b63      	ldr	r3, [pc, #396]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4960      	ldr	r1, [pc, #384]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d04c      	beq.n	8003758 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c6:	4b5a      	ldr	r3, [pc, #360]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d121      	bne.n	8003716 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0a6      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036de:	4b54      	ldr	r3, [pc, #336]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d115      	bne.n	8003716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e09a      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036f6:	4b4e      	ldr	r3, [pc, #312]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e08e      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003706:	4b4a      	ldr	r3, [pc, #296]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e086      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003716:	4b46      	ldr	r3, [pc, #280]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 0203 	bic.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4943      	ldr	r1, [pc, #268]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003728:	f7fd faec 	bl	8000d04 <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fd fae8 	bl	8000d04 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e06e      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 020c 	and.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	429a      	cmp	r2, r3
 8003756:	d1eb      	bne.n	8003730 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d010      	beq.n	8003786 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003770:	429a      	cmp	r2, r3
 8003772:	d208      	bcs.n	8003786 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003774:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	492b      	ldr	r1, [pc, #172]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003786:	4b29      	ldr	r3, [pc, #164]	; (800382c <HAL_RCC_ClockConfig+0x1ec>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d210      	bcs.n	80037b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003794:	4b25      	ldr	r3, [pc, #148]	; (800382c <HAL_RCC_ClockConfig+0x1ec>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 0207 	bic.w	r2, r3, #7
 800379c:	4923      	ldr	r1, [pc, #140]	; (800382c <HAL_RCC_ClockConfig+0x1ec>)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a4:	4b21      	ldr	r3, [pc, #132]	; (800382c <HAL_RCC_ClockConfig+0x1ec>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e036      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c2:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	4918      	ldr	r1, [pc, #96]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d009      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037e0:	4b13      	ldr	r3, [pc, #76]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4910      	ldr	r1, [pc, #64]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037f4:	f000 f824 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	490b      	ldr	r1, [pc, #44]	; (8003834 <HAL_RCC_ClockConfig+0x1f4>)
 8003806:	5ccb      	ldrb	r3, [r1, r3]
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	4a09      	ldr	r2, [pc, #36]	; (8003838 <HAL_RCC_ClockConfig+0x1f8>)
 8003812:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_RCC_ClockConfig+0x1fc>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd fa23 	bl	8000c64 <HAL_InitTick>
 800381e:	4603      	mov	r3, r0
 8003820:	72fb      	strb	r3, [r7, #11]

  return status;
 8003822:	7afb      	ldrb	r3, [r7, #11]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40022000 	.word	0x40022000
 8003830:	40021000 	.word	0x40021000
 8003834:	08004a6c 	.word	0x08004a6c
 8003838:	20000000 	.word	0x20000000
 800383c:	20000004 	.word	0x20000004

08003840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800384e:	4b3e      	ldr	r3, [pc, #248]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003858:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x34>
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d121      	bne.n	80038b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d11e      	bne.n	80038b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003874:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d107      	bne.n	8003890 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003880:	4b31      	ldr	r3, [pc, #196]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e005      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003890:	4b2d      	ldr	r3, [pc, #180]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800389c:	4a2b      	ldr	r2, [pc, #172]	; (800394c <HAL_RCC_GetSysClockFreq+0x10c>)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10d      	bne.n	80038c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d102      	bne.n	80038be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038b8:	4b25      	ldr	r3, [pc, #148]	; (8003950 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e004      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038c4:	4b23      	ldr	r3, [pc, #140]	; (8003954 <HAL_RCC_GetSysClockFreq+0x114>)
 80038c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d134      	bne.n	8003938 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ce:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d003      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0xac>
 80038e4:	e005      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038e6:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <HAL_RCC_GetSysClockFreq+0x110>)
 80038e8:	617b      	str	r3, [r7, #20]
      break;
 80038ea:	e005      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_RCC_GetSysClockFreq+0x114>)
 80038ee:	617b      	str	r3, [r7, #20]
      break;
 80038f0:	e002      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	617b      	str	r3, [r7, #20]
      break;
 80038f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f8:	4b13      	ldr	r3, [pc, #76]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	3301      	adds	r3, #1
 8003904:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	fb03 f202 	mul.w	r2, r3, r2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800391e:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	0e5b      	lsrs	r3, r3, #25
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	3301      	adds	r3, #1
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003938:	69bb      	ldr	r3, [r7, #24]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	; 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	08004a84 	.word	0x08004a84
 8003950:	00f42400 	.word	0x00f42400
 8003954:	007a1200 	.word	0x007a1200

08003958 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_RCC_GetHCLKFreq+0x14>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000000 	.word	0x20000000

08003970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003974:	f7ff fff0 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4904      	ldr	r1, [pc, #16]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000
 8003998:	08004a7c 	.word	0x08004a7c

0800399c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039a0:	f7ff ffda 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0adb      	lsrs	r3, r3, #11
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4904      	ldr	r1, [pc, #16]	; (80039c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40021000 	.word	0x40021000
 80039c4:	08004a7c 	.word	0x08004a7c

080039c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039d4:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039e0:	f7ff f9b6 	bl	8002d50 <HAL_PWREx_GetVoltageRange>
 80039e4:	6178      	str	r0, [r7, #20]
 80039e6:	e014      	b.n	8003a12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	4a24      	ldr	r2, [pc, #144]	; (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6593      	str	r3, [r2, #88]	; 0x58
 80039f4:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a00:	f7ff f9a6 	bl	8002d50 <HAL_PWREx_GetVoltageRange>
 8003a04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a06:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0a:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a18:	d10b      	bne.n	8003a32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b80      	cmp	r3, #128	; 0x80
 8003a1e:	d919      	bls.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2ba0      	cmp	r3, #160	; 0xa0
 8003a24:	d902      	bls.n	8003a2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a26:	2302      	movs	r3, #2
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	e013      	b.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	e010      	b.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	d902      	bls.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a38:	2303      	movs	r3, #3
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e00a      	b.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b80      	cmp	r3, #128	; 0x80
 8003a42:	d102      	bne.n	8003a4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a44:	2302      	movs	r3, #2
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	e004      	b.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b70      	cmp	r3, #112	; 0x70
 8003a4e:	d101      	bne.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a50:	2301      	movs	r3, #1
 8003a52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 0207 	bic.w	r2, r3, #7
 8003a5c:	4909      	ldr	r1, [pc, #36]	; (8003a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d001      	beq.n	8003a76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40022000 	.word	0x40022000

08003a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a90:	2300      	movs	r3, #0
 8003a92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a94:	2300      	movs	r3, #0
 8003a96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d031      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aac:	d01a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003aae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ab2:	d814      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d009      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ab8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003abc:	d10f      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003abe:	4b5d      	ldr	r3, [pc, #372]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4a5c      	ldr	r2, [pc, #368]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aca:	e00c      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f9de 	bl	8003e94 <RCCEx_PLLSAI1_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003adc:	e003      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae6:	7cfb      	ldrb	r3, [r7, #19]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10b      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aec:	4b51      	ldr	r3, [pc, #324]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	494e      	ldr	r1, [pc, #312]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b02:	e001      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 809e 	beq.w	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b1a:	4b46      	ldr	r3, [pc, #280]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00d      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b30:	4b40      	ldr	r3, [pc, #256]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	4a3f      	ldr	r2, [pc, #252]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b3c:	4b3d      	ldr	r3, [pc, #244]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a39      	ldr	r2, [pc, #228]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b58:	f7fd f8d4 	bl	8000d04 <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b5e:	e009      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b60:	f7fd f8d0 	bl	8000d04 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d902      	bls.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	74fb      	strb	r3, [r7, #19]
        break;
 8003b72:	e005      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b74:	4b30      	ldr	r3, [pc, #192]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0ef      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d15a      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b86:	4b2b      	ldr	r3, [pc, #172]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01e      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d019      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	4a1f      	ldr	r2, [pc, #124]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bce:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d016      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fd f890 	bl	8000d04 <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be6:	e00b      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fd f88c 	bl	8000d04 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d902      	bls.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	74fb      	strb	r3, [r7, #19]
            break;
 8003bfe:	e006      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0ec      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c14:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c22:	4904      	ldr	r1, [pc, #16]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c2a:	e009      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	74bb      	strb	r3, [r7, #18]
 8003c30:	e006      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c40:	7c7b      	ldrb	r3, [r7, #17]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d105      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c46:	4b8a      	ldr	r3, [pc, #552]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	4a89      	ldr	r2, [pc, #548]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c5e:	4b84      	ldr	r3, [pc, #528]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f023 0203 	bic.w	r2, r3, #3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4980      	ldr	r1, [pc, #512]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c80:	4b7b      	ldr	r3, [pc, #492]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f023 020c 	bic.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	4978      	ldr	r1, [pc, #480]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ca2:	4b73      	ldr	r3, [pc, #460]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	496f      	ldr	r1, [pc, #444]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc4:	4b6a      	ldr	r3, [pc, #424]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	4967      	ldr	r1, [pc, #412]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce6:	4b62      	ldr	r3, [pc, #392]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	495e      	ldr	r1, [pc, #376]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d08:	4b59      	ldr	r3, [pc, #356]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	4956      	ldr	r1, [pc, #344]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d2a:	4b51      	ldr	r3, [pc, #324]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	494d      	ldr	r1, [pc, #308]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d028      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d4c:	4b48      	ldr	r3, [pc, #288]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	4945      	ldr	r1, [pc, #276]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d6c:	4b40      	ldr	r3, [pc, #256]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a3f      	ldr	r2, [pc, #252]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d76:	60d3      	str	r3, [r2, #12]
 8003d78:	e011      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f882 	bl	8003e94 <RCCEx_PLLSAI1_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d94:	7cfb      	ldrb	r3, [r7, #19]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003d9a:	7cfb      	ldrb	r3, [r7, #19]
 8003d9c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d028      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003daa:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db8:	492d      	ldr	r1, [pc, #180]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc8:	d106      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dca:	4b29      	ldr	r3, [pc, #164]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4a28      	ldr	r2, [pc, #160]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dd4:	60d3      	str	r3, [r2, #12]
 8003dd6:	e011      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3304      	adds	r3, #4
 8003de6:	2101      	movs	r1, #1
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 f853 	bl	8003e94 <RCCEx_PLLSAI1_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003df2:	7cfb      	ldrb	r3, [r7, #19]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01c      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e08:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e16:	4916      	ldr	r1, [pc, #88]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e26:	d10c      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 f830 	bl	8003e94 <RCCEx_PLLSAI1_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003e3e:	7cfb      	ldrb	r3, [r7, #19]
 8003e40:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e4e:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5c:	4904      	ldr	r1, [pc, #16]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e64:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000

08003e74 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a04      	ldr	r2, [pc, #16]	; (8003e90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e7e:	f043 0304 	orr.w	r3, r3, #4
 8003e82:	6013      	str	r3, [r2, #0]
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000

08003e94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ea2:	4b74      	ldr	r3, [pc, #464]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d018      	beq.n	8003ee0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003eae:	4b71      	ldr	r3, [pc, #452]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0203 	and.w	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d10d      	bne.n	8003eda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ec6:	4b6b      	ldr	r3, [pc, #428]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d047      	beq.n	8003f6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
 8003ede:	e044      	b.n	8003f6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d018      	beq.n	8003f1a <RCCEx_PLLSAI1_Config+0x86>
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d825      	bhi.n	8003f38 <RCCEx_PLLSAI1_Config+0xa4>
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d002      	beq.n	8003ef6 <RCCEx_PLLSAI1_Config+0x62>
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d009      	beq.n	8003f08 <RCCEx_PLLSAI1_Config+0x74>
 8003ef4:	e020      	b.n	8003f38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ef6:	4b5f      	ldr	r3, [pc, #380]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d11d      	bne.n	8003f3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f06:	e01a      	b.n	8003f3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f08:	4b5a      	ldr	r3, [pc, #360]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d116      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f18:	e013      	b.n	8003f42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f1a:	4b56      	ldr	r3, [pc, #344]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f26:	4b53      	ldr	r3, [pc, #332]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f36:	e006      	b.n	8003f46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f3c:	e004      	b.n	8003f48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f46:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10d      	bne.n	8003f6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f4e:	4b49      	ldr	r3, [pc, #292]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6819      	ldr	r1, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	430b      	orrs	r3, r1
 8003f64:	4943      	ldr	r1, [pc, #268]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d17c      	bne.n	800406a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f70:	4b40      	ldr	r3, [pc, #256]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3f      	ldr	r2, [pc, #252]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f7c:	f7fc fec2 	bl	8000d04 <HAL_GetTick>
 8003f80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f82:	e009      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f84:	f7fc febe 	bl	8000d04 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d902      	bls.n	8003f98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	73fb      	strb	r3, [r7, #15]
        break;
 8003f96:	e005      	b.n	8003fa4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f98:	4b36      	ldr	r3, [pc, #216]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ef      	bne.n	8003f84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d15f      	bne.n	800406a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d110      	bne.n	8003fd2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fb0:	4b30      	ldr	r3, [pc, #192]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003fb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6892      	ldr	r2, [r2, #8]
 8003fc0:	0211      	lsls	r1, r2, #8
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68d2      	ldr	r2, [r2, #12]
 8003fc6:	06d2      	lsls	r2, r2, #27
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	492a      	ldr	r1, [pc, #168]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	610b      	str	r3, [r1, #16]
 8003fd0:	e027      	b.n	8004022 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d112      	bne.n	8003ffe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fd8:	4b26      	ldr	r3, [pc, #152]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fe0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6892      	ldr	r2, [r2, #8]
 8003fe8:	0211      	lsls	r1, r2, #8
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6912      	ldr	r2, [r2, #16]
 8003fee:	0852      	lsrs	r2, r2, #1
 8003ff0:	3a01      	subs	r2, #1
 8003ff2:	0552      	lsls	r2, r2, #21
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	491f      	ldr	r1, [pc, #124]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	610b      	str	r3, [r1, #16]
 8003ffc:	e011      	b.n	8004022 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004006:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6892      	ldr	r2, [r2, #8]
 800400e:	0211      	lsls	r1, r2, #8
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6952      	ldr	r2, [r2, #20]
 8004014:	0852      	lsrs	r2, r2, #1
 8004016:	3a01      	subs	r2, #1
 8004018:	0652      	lsls	r2, r2, #25
 800401a:	430a      	orrs	r2, r1
 800401c:	4915      	ldr	r1, [pc, #84]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004022:	4b14      	ldr	r3, [pc, #80]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a13      	ldr	r2, [pc, #76]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800402c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402e:	f7fc fe69 	bl	8000d04 <HAL_GetTick>
 8004032:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004034:	e009      	b.n	800404a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004036:	f7fc fe65 	bl	8000d04 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d902      	bls.n	800404a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	73fb      	strb	r3, [r7, #15]
          break;
 8004048:	e005      	b.n	8004056 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0ef      	beq.n	8004036 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	4903      	ldr	r1, [pc, #12]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004066:	4313      	orrs	r3, r2
 8004068:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40021000 	.word	0x40021000

08004078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e040      	b.n	800410c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fc fce6 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2224      	movs	r2, #36	; 0x24
 80040a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa54 	bl	800456c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f825 	bl	8004114 <UART_SetConfig>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e01b      	b.n	800410c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fad3 	bl	80046b0 <UART_CheckIdleState>
 800410a:	4603      	mov	r3, r0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004118:	b08a      	sub	sp, #40	; 0x28
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	431a      	orrs	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	4313      	orrs	r3, r2
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4bb4      	ldr	r3, [pc, #720]	; (8004414 <UART_SetConfig+0x300>)
 8004144:	4013      	ands	r3, r2
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800414c:	430b      	orrs	r3, r1
 800414e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4aa9      	ldr	r2, [pc, #676]	; (8004418 <UART_SetConfig+0x304>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417c:	4313      	orrs	r3, r2
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4aa0      	ldr	r2, [pc, #640]	; (800441c <UART_SetConfig+0x308>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d126      	bne.n	80041ec <UART_SetConfig+0xd8>
 800419e:	4ba0      	ldr	r3, [pc, #640]	; (8004420 <UART_SetConfig+0x30c>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d81b      	bhi.n	80041e4 <UART_SetConfig+0xd0>
 80041ac:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <UART_SetConfig+0xa0>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041d5 	.word	0x080041d5
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	080041dd 	.word	0x080041dd
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ca:	e080      	b.n	80042ce <UART_SetConfig+0x1ba>
 80041cc:	2302      	movs	r3, #2
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d2:	e07c      	b.n	80042ce <UART_SetConfig+0x1ba>
 80041d4:	2304      	movs	r3, #4
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041da:	e078      	b.n	80042ce <UART_SetConfig+0x1ba>
 80041dc:	2308      	movs	r3, #8
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e074      	b.n	80042ce <UART_SetConfig+0x1ba>
 80041e4:	2310      	movs	r3, #16
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ea:	e070      	b.n	80042ce <UART_SetConfig+0x1ba>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a8c      	ldr	r2, [pc, #560]	; (8004424 <UART_SetConfig+0x310>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d138      	bne.n	8004268 <UART_SetConfig+0x154>
 80041f6:	4b8a      	ldr	r3, [pc, #552]	; (8004420 <UART_SetConfig+0x30c>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b0c      	cmp	r3, #12
 8004202:	d82d      	bhi.n	8004260 <UART_SetConfig+0x14c>
 8004204:	a201      	add	r2, pc, #4	; (adr r2, 800420c <UART_SetConfig+0xf8>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	08004241 	.word	0x08004241
 8004210:	08004261 	.word	0x08004261
 8004214:	08004261 	.word	0x08004261
 8004218:	08004261 	.word	0x08004261
 800421c:	08004251 	.word	0x08004251
 8004220:	08004261 	.word	0x08004261
 8004224:	08004261 	.word	0x08004261
 8004228:	08004261 	.word	0x08004261
 800422c:	08004249 	.word	0x08004249
 8004230:	08004261 	.word	0x08004261
 8004234:	08004261 	.word	0x08004261
 8004238:	08004261 	.word	0x08004261
 800423c:	08004259 	.word	0x08004259
 8004240:	2300      	movs	r3, #0
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004246:	e042      	b.n	80042ce <UART_SetConfig+0x1ba>
 8004248:	2302      	movs	r3, #2
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424e:	e03e      	b.n	80042ce <UART_SetConfig+0x1ba>
 8004250:	2304      	movs	r3, #4
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004256:	e03a      	b.n	80042ce <UART_SetConfig+0x1ba>
 8004258:	2308      	movs	r3, #8
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425e:	e036      	b.n	80042ce <UART_SetConfig+0x1ba>
 8004260:	2310      	movs	r3, #16
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004266:	e032      	b.n	80042ce <UART_SetConfig+0x1ba>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a6a      	ldr	r2, [pc, #424]	; (8004418 <UART_SetConfig+0x304>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d12a      	bne.n	80042c8 <UART_SetConfig+0x1b4>
 8004272:	4b6b      	ldr	r3, [pc, #428]	; (8004420 <UART_SetConfig+0x30c>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800427c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004280:	d01a      	beq.n	80042b8 <UART_SetConfig+0x1a4>
 8004282:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004286:	d81b      	bhi.n	80042c0 <UART_SetConfig+0x1ac>
 8004288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428c:	d00c      	beq.n	80042a8 <UART_SetConfig+0x194>
 800428e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004292:	d815      	bhi.n	80042c0 <UART_SetConfig+0x1ac>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <UART_SetConfig+0x18c>
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429c:	d008      	beq.n	80042b0 <UART_SetConfig+0x19c>
 800429e:	e00f      	b.n	80042c0 <UART_SetConfig+0x1ac>
 80042a0:	2300      	movs	r3, #0
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e012      	b.n	80042ce <UART_SetConfig+0x1ba>
 80042a8:	2302      	movs	r3, #2
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ae:	e00e      	b.n	80042ce <UART_SetConfig+0x1ba>
 80042b0:	2304      	movs	r3, #4
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b6:	e00a      	b.n	80042ce <UART_SetConfig+0x1ba>
 80042b8:	2308      	movs	r3, #8
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042be:	e006      	b.n	80042ce <UART_SetConfig+0x1ba>
 80042c0:	2310      	movs	r3, #16
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c6:	e002      	b.n	80042ce <UART_SetConfig+0x1ba>
 80042c8:	2310      	movs	r3, #16
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a51      	ldr	r2, [pc, #324]	; (8004418 <UART_SetConfig+0x304>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d17a      	bne.n	80043ce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d824      	bhi.n	800432a <UART_SetConfig+0x216>
 80042e0:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <UART_SetConfig+0x1d4>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	0800430d 	.word	0x0800430d
 80042ec:	0800432b 	.word	0x0800432b
 80042f0:	08004315 	.word	0x08004315
 80042f4:	0800432b 	.word	0x0800432b
 80042f8:	0800431b 	.word	0x0800431b
 80042fc:	0800432b 	.word	0x0800432b
 8004300:	0800432b 	.word	0x0800432b
 8004304:	0800432b 	.word	0x0800432b
 8004308:	08004323 	.word	0x08004323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800430c:	f7ff fb30 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8004310:	61f8      	str	r0, [r7, #28]
        break;
 8004312:	e010      	b.n	8004336 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004314:	4b44      	ldr	r3, [pc, #272]	; (8004428 <UART_SetConfig+0x314>)
 8004316:	61fb      	str	r3, [r7, #28]
        break;
 8004318:	e00d      	b.n	8004336 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431a:	f7ff fa91 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 800431e:	61f8      	str	r0, [r7, #28]
        break;
 8004320:	e009      	b.n	8004336 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004326:	61fb      	str	r3, [r7, #28]
        break;
 8004328:	e005      	b.n	8004336 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004334:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8107 	beq.w	800454c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	429a      	cmp	r2, r3
 800434c:	d305      	bcc.n	800435a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	429a      	cmp	r2, r3
 8004358:	d903      	bls.n	8004362 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004360:	e0f4      	b.n	800454c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2200      	movs	r2, #0
 8004366:	461c      	mov	r4, r3
 8004368:	4615      	mov	r5, r2
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	022b      	lsls	r3, r5, #8
 8004374:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004378:	0222      	lsls	r2, r4, #8
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	6849      	ldr	r1, [r1, #4]
 800437e:	0849      	lsrs	r1, r1, #1
 8004380:	2000      	movs	r0, #0
 8004382:	4688      	mov	r8, r1
 8004384:	4681      	mov	r9, r0
 8004386:	eb12 0a08 	adds.w	sl, r2, r8
 800438a:	eb43 0b09 	adc.w	fp, r3, r9
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	603b      	str	r3, [r7, #0]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800439c:	4650      	mov	r0, sl
 800439e:	4659      	mov	r1, fp
 80043a0:	f7fb ff1e 	bl	80001e0 <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4613      	mov	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043b2:	d308      	bcc.n	80043c6 <UART_SetConfig+0x2b2>
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ba:	d204      	bcs.n	80043c6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	60da      	str	r2, [r3, #12]
 80043c4:	e0c2      	b.n	800454c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043cc:	e0be      	b.n	800454c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d6:	d16a      	bne.n	80044ae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80043d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d834      	bhi.n	800444a <UART_SetConfig+0x336>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <UART_SetConfig+0x2d4>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	0800442d 	.word	0x0800442d
 80043f0:	08004435 	.word	0x08004435
 80043f4:	0800444b 	.word	0x0800444b
 80043f8:	0800443b 	.word	0x0800443b
 80043fc:	0800444b 	.word	0x0800444b
 8004400:	0800444b 	.word	0x0800444b
 8004404:	0800444b 	.word	0x0800444b
 8004408:	08004443 	.word	0x08004443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800440c:	f7ff fab0 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8004410:	61f8      	str	r0, [r7, #28]
        break;
 8004412:	e020      	b.n	8004456 <UART_SetConfig+0x342>
 8004414:	efff69f3 	.word	0xefff69f3
 8004418:	40008000 	.word	0x40008000
 800441c:	40013800 	.word	0x40013800
 8004420:	40021000 	.word	0x40021000
 8004424:	40004400 	.word	0x40004400
 8004428:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800442c:	f7ff fab6 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8004430:	61f8      	str	r0, [r7, #28]
        break;
 8004432:	e010      	b.n	8004456 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004434:	4b4c      	ldr	r3, [pc, #304]	; (8004568 <UART_SetConfig+0x454>)
 8004436:	61fb      	str	r3, [r7, #28]
        break;
 8004438:	e00d      	b.n	8004456 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443a:	f7ff fa01 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 800443e:	61f8      	str	r0, [r7, #28]
        break;
 8004440:	e009      	b.n	8004456 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004446:	61fb      	str	r3, [r7, #28]
        break;
 8004448:	e005      	b.n	8004456 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004454:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d077      	beq.n	800454c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005a      	lsls	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	441a      	add	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b0f      	cmp	r3, #15
 8004476:	d916      	bls.n	80044a6 <UART_SetConfig+0x392>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447e:	d212      	bcs.n	80044a6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f023 030f 	bic.w	r3, r3, #15
 8004488:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	b29b      	uxth	r3, r3
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	b29a      	uxth	r2, r3
 8004496:	8afb      	ldrh	r3, [r7, #22]
 8004498:	4313      	orrs	r3, r2
 800449a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	8afa      	ldrh	r2, [r7, #22]
 80044a2:	60da      	str	r2, [r3, #12]
 80044a4:	e052      	b.n	800454c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044ac:	e04e      	b.n	800454c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d827      	bhi.n	8004506 <UART_SetConfig+0x3f2>
 80044b6:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <UART_SetConfig+0x3a8>)
 80044b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	080044e9 	.word	0x080044e9
 80044c4:	080044f1 	.word	0x080044f1
 80044c8:	08004507 	.word	0x08004507
 80044cc:	080044f7 	.word	0x080044f7
 80044d0:	08004507 	.word	0x08004507
 80044d4:	08004507 	.word	0x08004507
 80044d8:	08004507 	.word	0x08004507
 80044dc:	080044ff 	.word	0x080044ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e0:	f7ff fa46 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 80044e4:	61f8      	str	r0, [r7, #28]
        break;
 80044e6:	e014      	b.n	8004512 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044e8:	f7ff fa58 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 80044ec:	61f8      	str	r0, [r7, #28]
        break;
 80044ee:	e010      	b.n	8004512 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f0:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <UART_SetConfig+0x454>)
 80044f2:	61fb      	str	r3, [r7, #28]
        break;
 80044f4:	e00d      	b.n	8004512 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044f6:	f7ff f9a3 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80044fa:	61f8      	str	r0, [r7, #28]
        break;
 80044fc:	e009      	b.n	8004512 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004502:	61fb      	str	r3, [r7, #28]
        break;
 8004504:	e005      	b.n	8004512 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004510:	bf00      	nop
    }

    if (pclk != 0U)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d019      	beq.n	800454c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	085a      	lsrs	r2, r3, #1
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	441a      	add	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b0f      	cmp	r3, #15
 8004530:	d909      	bls.n	8004546 <UART_SetConfig+0x432>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004538:	d205      	bcs.n	8004546 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60da      	str	r2, [r3, #12]
 8004544:	e002      	b.n	800454c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004558:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800455c:	4618      	mov	r0, r3
 800455e:	3728      	adds	r7, #40	; 0x28
 8004560:	46bd      	mov	sp, r7
 8004562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004566:	bf00      	nop
 8004568:	00f42400 	.word	0x00f42400

0800456c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01a      	beq.n	8004682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466a:	d10a      	bne.n	8004682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	605a      	str	r2, [r3, #4]
  }
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b098      	sub	sp, #96	; 0x60
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046c0:	f7fc fb20 	bl	8000d04 <HAL_GetTick>
 80046c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d12e      	bne.n	8004732 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046dc:	2200      	movs	r2, #0
 80046de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f88c 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d021      	beq.n	8004732 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	e853 3f00 	ldrex	r3, [r3]
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004702:	653b      	str	r3, [r7, #80]	; 0x50
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800470c:	647b      	str	r3, [r7, #68]	; 0x44
 800470e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004714:	e841 2300 	strex	r3, r2, [r1]
 8004718:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800471a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e6      	bne.n	80046ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e062      	b.n	80047f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b04      	cmp	r3, #4
 800473e:	d149      	bne.n	80047d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004748:	2200      	movs	r2, #0
 800474a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f856 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d03c      	beq.n	80047d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	623b      	str	r3, [r7, #32]
   return(result);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800476e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004778:	633b      	str	r3, [r7, #48]	; 0x30
 800477a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800477e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e6      	bne.n	800475a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3308      	adds	r3, #8
 8004792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	60fb      	str	r3, [r7, #12]
   return(result);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3308      	adds	r3, #8
 80047aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ac:	61fa      	str	r2, [r7, #28]
 80047ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	69b9      	ldr	r1, [r7, #24]
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	617b      	str	r3, [r7, #20]
   return(result);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e5      	bne.n	800478c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e011      	b.n	80047f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3758      	adds	r7, #88	; 0x58
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004810:	e049      	b.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d045      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	f7fc fa73 	bl	8000d04 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <UART_WaitOnFlagUntilTimeout+0x30>
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e048      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d031      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d110      	bne.n	8004872 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2208      	movs	r2, #8
 8004856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f838 	bl	80048ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2208      	movs	r2, #8
 8004862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e029      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004880:	d111      	bne.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800488a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f81e 	bl	80048ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e00f      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4013      	ands	r3, r2
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d0a6      	beq.n	8004812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b095      	sub	sp, #84	; 0x54
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f4:	643b      	str	r3, [r7, #64]	; 0x40
 80048f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e6      	bne.n	80048d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	61fb      	str	r3, [r7, #28]
   return(result);
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004928:	62fa      	str	r2, [r7, #44]	; 0x2c
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800492e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e5      	bne.n	8004908 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004940:	2b01      	cmp	r3, #1
 8004942:	d118      	bne.n	8004976 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	60bb      	str	r3, [r7, #8]
   return(result);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f023 0310 	bic.w	r3, r3, #16
 8004958:	647b      	str	r3, [r7, #68]	; 0x44
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6979      	ldr	r1, [r7, #20]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	613b      	str	r3, [r7, #16]
   return(result);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e6      	bne.n	8004944 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	669a      	str	r2, [r3, #104]	; 0x68
}
 800498a:	bf00      	nop
 800498c:	3754      	adds	r7, #84	; 0x54
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <memset>:
 8004996:	4402      	add	r2, r0
 8004998:	4603      	mov	r3, r0
 800499a:	4293      	cmp	r3, r2
 800499c:	d100      	bne.n	80049a0 <memset+0xa>
 800499e:	4770      	bx	lr
 80049a0:	f803 1b01 	strb.w	r1, [r3], #1
 80049a4:	e7f9      	b.n	800499a <memset+0x4>
	...

080049a8 <__libc_init_array>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	4d0d      	ldr	r5, [pc, #52]	; (80049e0 <__libc_init_array+0x38>)
 80049ac:	4c0d      	ldr	r4, [pc, #52]	; (80049e4 <__libc_init_array+0x3c>)
 80049ae:	1b64      	subs	r4, r4, r5
 80049b0:	10a4      	asrs	r4, r4, #2
 80049b2:	2600      	movs	r6, #0
 80049b4:	42a6      	cmp	r6, r4
 80049b6:	d109      	bne.n	80049cc <__libc_init_array+0x24>
 80049b8:	4d0b      	ldr	r5, [pc, #44]	; (80049e8 <__libc_init_array+0x40>)
 80049ba:	4c0c      	ldr	r4, [pc, #48]	; (80049ec <__libc_init_array+0x44>)
 80049bc:	f000 f820 	bl	8004a00 <_init>
 80049c0:	1b64      	subs	r4, r4, r5
 80049c2:	10a4      	asrs	r4, r4, #2
 80049c4:	2600      	movs	r6, #0
 80049c6:	42a6      	cmp	r6, r4
 80049c8:	d105      	bne.n	80049d6 <__libc_init_array+0x2e>
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d0:	4798      	blx	r3
 80049d2:	3601      	adds	r6, #1
 80049d4:	e7ee      	b.n	80049b4 <__libc_init_array+0xc>
 80049d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049da:	4798      	blx	r3
 80049dc:	3601      	adds	r6, #1
 80049de:	e7f2      	b.n	80049c6 <__libc_init_array+0x1e>
 80049e0:	08004abc 	.word	0x08004abc
 80049e4:	08004abc 	.word	0x08004abc
 80049e8:	08004abc 	.word	0x08004abc
 80049ec:	08004ac0 	.word	0x08004ac0

080049f0 <strcpy>:
 80049f0:	4603      	mov	r3, r0
 80049f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049f6:	f803 2b01 	strb.w	r2, [r3], #1
 80049fa:	2a00      	cmp	r2, #0
 80049fc:	d1f9      	bne.n	80049f2 <strcpy+0x2>
 80049fe:	4770      	bx	lr

08004a00 <_init>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	bf00      	nop
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr

08004a0c <_fini>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	bf00      	nop
 8004a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a12:	bc08      	pop	{r3}
 8004a14:	469e      	mov	lr, r3
 8004a16:	4770      	bx	lr
