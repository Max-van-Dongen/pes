
i2cSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e1c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff0  08005ff0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ff8  08005ff8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  0800600c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  0800600c  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b4b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000282d  00000000  00000000  00033bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  000363f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e76  00000000  00000000  00037658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002138a  00000000  00000000  000384ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015caa  00000000  00000000  00059858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbdec  00000000  00000000  0006f502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004df4  00000000  00000000  0013b2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  001400e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005f90 	.word	0x08005f90

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005f90 	.word	0x08005f90

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <process_data>:
uint8_t startPosition = 0;
uint8_t bytesRrecvd = 0;
uint8_t bytesTransd = 0;

int process_data (void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
	int startREG = RxData[0];  // get the register address
 80004ce:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <process_data+0x7c>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	617b      	str	r3, [r7, #20]
	int numREG = bytesRrecvd;  // Get the number of registers
 80004d4:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <process_data+0x80>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	60bb      	str	r3, [r7, #8]
	int endREG = startREG + numREG -1;  // calculate the end register
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	4413      	add	r3, r2
 80004e0:	3b01      	subs	r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
	if (endREG>9)  // There are a total of 10 registers (0-9)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b09      	cmp	r3, #9
 80004e8:	dd09      	ble.n	80004fe <process_data+0x36>
	{
		// clear everything and return
		memset(RxData,'\0',RxSIZE);
 80004ea:	220b      	movs	r2, #11
 80004ec:	2100      	movs	r1, #0
 80004ee:	4815      	ldr	r0, [pc, #84]	; (8000544 <process_data+0x7c>)
 80004f0:	f005 fd21 	bl	8005f36 <memset>
		rxcount =0;
 80004f4:	4b15      	ldr	r3, [pc, #84]	; (800054c <process_data+0x84>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
		return 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	e01d      	b.n	800053a <process_data+0x72>
	}

//	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	funcToRun = RxData[numREG];
 80004fe:	4a11      	ldr	r2, [pc, #68]	; (8000544 <process_data+0x7c>)
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	4413      	add	r3, r2
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	461a      	mov	r2, r3
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <process_data+0x88>)
 800050a:	601a      	str	r2, [r3, #0]
//		setServoAngle(180);
//		HAL_Delay(5000);
//		setServoAngle(0);
//
//	}
	int indx = 1;  // set the indx to 1 in order to start reading from RxData[1]
 800050c:	2301      	movs	r3, #1
 800050e:	613b      	str	r3, [r7, #16]
	for (int i=0; i<numREG; i++)
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	e00c      	b.n	8000530 <process_data+0x68>
	{
		I2C_REGISTERS[startREG++] = RxData[indx++];  // Read the data from RxData and save it in the I2C_REGISTERS
 8000516:	693a      	ldr	r2, [r7, #16]
 8000518:	1c53      	adds	r3, r2, #1
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	1c59      	adds	r1, r3, #1
 8000520:	6179      	str	r1, [r7, #20]
 8000522:	4908      	ldr	r1, [pc, #32]	; (8000544 <process_data+0x7c>)
 8000524:	5c89      	ldrb	r1, [r1, r2]
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <process_data+0x8c>)
 8000528:	54d1      	strb	r1, [r2, r3]
	for (int i=0; i<numREG; i++)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3301      	adds	r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	429a      	cmp	r2, r3
 8000536:	dbee      	blt.n	8000516 <process_data+0x4e>
	}


	return 1;  // success
 8000538:	2301      	movs	r3, #1
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000034 	.word	0x20000034
 8000548:	20000042 	.word	0x20000042
 800054c:	2000003f 	.word	0x2000003f
 8000550:	2000016c 	.word	0x2000016c
 8000554:	20000028 	.word	0x20000028

08000558 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f001 fbbd 	bl	8001ce0 <HAL_I2C_EnableListen_IT>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
 800057c:	4613      	mov	r3, r2
 800057e:	803b      	strh	r3, [r7, #0]


	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000580:	78fb      	ldrb	r3, [r7, #3]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d110      	bne.n	80005a8 <HAL_I2C_AddrCallback+0x38>
	{

		RxData[0] = 0;  // reset the RxData[0] to clear any residue address from previous call
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_I2C_AddrCallback+0x70>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
		rxcount =0;
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <HAL_I2C_AddrCallback+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <HAL_I2C_AddrCallback+0x74>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_I2C_AddrCallback+0x70>)
 800059a:	18d1      	adds	r1, r2, r3
 800059c:	2300      	movs	r3, #0
 800059e:	2201      	movs	r2, #1
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f001 faeb 	bl	8001b7c <HAL_I2C_Slave_Seq_Receive_IT>
		startPosition = RxData[0];
		RxData[0] = 0;  // Reset the start register as we have already copied it
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_FIRST_FRAME);
//		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
	}
}
 80005a6:	e016      	b.n	80005d6 <HAL_I2C_AddrCallback+0x66>
		txcount = 0;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <HAL_I2C_AddrCallback+0x78>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
		startPosition = RxData[0];
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_I2C_AddrCallback+0x70>)
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_I2C_AddrCallback+0x7c>)
 80005b4:	701a      	strb	r2, [r3, #0]
		RxData[0] = 0;  // Reset the start register as we have already copied it
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_I2C_AddrCallback+0x70>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_FIRST_FRAME);
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <HAL_I2C_AddrCallback+0x7c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_I2C_AddrCallback+0x78>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <HAL_I2C_AddrCallback+0x80>)
 80005ca:	1899      	adds	r1, r3, r2
 80005cc:	2300      	movs	r3, #0
 80005ce:	2201      	movs	r2, #1
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f001 fa21 	bl	8001a18 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000034 	.word	0x20000034
 80005e4:	2000003f 	.word	0x2000003f
 80005e8:	20000040 	.word	0x20000040
 80005ec:	20000041 	.word	0x20000041
 80005f0:	20000028 	.word	0x20000028

080005f4 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	txcount++;
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8000606:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_NEXT_FRAME);
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_I2C_SlaveTxCpltCallback+0x40>)
 8000616:	1899      	adds	r1, r3, r2
 8000618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800061c:	2201      	movs	r2, #1
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f001 f9fa 	bl	8001a18 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000040 	.word	0x20000040
 8000630:	20000041 	.word	0x20000041
 8000634:	20000028 	.word	0x20000028

08000638 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	rxcount++;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800064a:	701a      	strb	r2, [r3, #0]
	if (rxcount < RxSIZE)
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b0a      	cmp	r3, #10
 8000652:	d81a      	bhi.n	800068a <HAL_I2C_SlaveRxCpltCallback+0x52>
	{
		if (rxcount == RxSIZE-1)
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b0a      	cmp	r3, #10
 800065a:	d10b      	bne.n	8000674 <HAL_I2C_SlaveRxCpltCallback+0x3c>
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_LAST_FRAME);
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8000664:	18d1      	adds	r1, r2, r3
 8000666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800066a:	2201      	movs	r2, #1
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f001 fa85 	bl	8001b7c <HAL_I2C_Slave_Seq_Receive_IT>
 8000672:	e00a      	b.n	800068a <HAL_I2C_SlaveRxCpltCallback+0x52>
		}
		else
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_NEXT_FRAME);
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 800067c:	18d1      	adds	r1, r2, r3
 800067e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000682:	2201      	movs	r2, #1
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f001 fa79 	bl	8001b7c <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if (rxcount == RxSIZE)
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b0b      	cmp	r3, #11
 8000690:	d101      	bne.n	8000696 <HAL_I2C_SlaveRxCpltCallback+0x5e>
	{
		process_data();
 8000692:	f7ff ff19 	bl	80004c8 <process_data>
	}
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000003f 	.word	0x2000003f
 80006a4:	20000034 	.word	0x20000034

080006a8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f001 fbdc 	bl	8001e6e <HAL_I2C_GetError>
 80006b6:	60f8      	str	r0, [r7, #12]

	if (errorcode == 4)  // AF error
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d119      	bne.n	80006f2 <HAL_I2C_ErrorCallback+0x4a>
	{
		if (txcount == 0)  // error is while slave is receiving
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <HAL_I2C_ErrorCallback+0x7c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d10b      	bne.n	80006de <HAL_I2C_ErrorCallback+0x36>
		{
			bytesRrecvd = rxcount-1;  // the first byte is the register address
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_I2C_ErrorCallback+0x80>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <HAL_I2C_ErrorCallback+0x84>)
 80006d0:	701a      	strb	r2, [r3, #0]
			rxcount = 0;  // Reset the rxcount for the next operation
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_I2C_ErrorCallback+0x80>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
			process_data();
 80006d8:	f7ff fef6 	bl	80004c8 <process_data>
 80006dc:	e01a      	b.n	8000714 <HAL_I2C_ErrorCallback+0x6c>
		}
		else // error while slave is transmitting
		{
			bytesTransd = txcount-1;  // the txcount is 1 higher than the actual data transmitted
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <HAL_I2C_ErrorCallback+0x7c>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_I2C_ErrorCallback+0x88>)
 80006e8:	701a      	strb	r2, [r3, #0]
			txcount = 0;  // Reset the txcount for the next operation
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HAL_I2C_ErrorCallback+0x7c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e010      	b.n	8000714 <HAL_I2C_ErrorCallback+0x6c>
	/* BERR Error commonly occurs during the Direction switch
	 * Here we the software reset bit is set by the HAL error handler
	 * Before resetting this bit, we make sure the I2C lines are released and the bus is free
	 * I am simply reinitializing the I2C to do so
	 */
	else if (errorcode == 1)  // BERR Error
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d10d      	bne.n	8000714 <HAL_I2C_ErrorCallback+0x6c>
	{
		HAL_I2C_DeInit(hi2c);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f001 f95e 	bl	80019ba <HAL_I2C_DeInit>
		HAL_I2C_Init(hi2c);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f001 f8c0 	bl	8001884 <HAL_I2C_Init>
		memset(RxData,'\0',RxSIZE);  // reset the Rx buffer
 8000704:	220b      	movs	r2, #11
 8000706:	2100      	movs	r1, #0
 8000708:	480a      	ldr	r0, [pc, #40]	; (8000734 <HAL_I2C_ErrorCallback+0x8c>)
 800070a:	f005 fc14 	bl	8005f36 <memset>
		rxcount =0;  // reset the count
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_I2C_ErrorCallback+0x80>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
	}

	HAL_I2C_EnableListen_IT(hi2c);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f001 fae3 	bl	8001ce0 <HAL_I2C_EnableListen_IT>
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000040 	.word	0x20000040
 8000728:	2000003f 	.word	0x2000003f
 800072c:	20000042 	.word	0x20000042
 8000730:	20000043 	.word	0x20000043
 8000734:	20000034 	.word	0x20000034

08000738 <setServoAngle>:
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
int funcToRun = 0;
#define MIN_PULSEWIDTH 1000
#define MAX_PULSEWIDTH 4000
  void setServoAngle(uint32_t angle) {
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
      // Convert angle to pulse width
      uint32_t pulseWidth = (angle * (MAX_PULSEWIDTH - MIN_PULSEWIDTH) / 180) + MIN_PULSEWIDTH;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000746:	fb02 f303 	mul.w	r3, r2, r3
 800074a:	089b      	lsrs	r3, r3, #2
 800074c:	4a08      	ldr	r2, [pc, #32]	; (8000770 <setServoAngle+0x38>)
 800074e:	fba2 2303 	umull	r2, r3, r2, r3
 8000752:	089b      	lsrs	r3, r3, #2
 8000754:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000758:	60fb      	str	r3, [r7, #12]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulseWidth);
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <setServoAngle+0x3c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	635a      	str	r2, [r3, #52]	; 0x34
  }
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	16c16c17 	.word	0x16c16c17
 8000774:	20000098 	.word	0x20000098

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077c:	f000 fc0b 	bl	8000f96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000780:	f000 f84a 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 f9c8 	bl	8000b18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000788:	f000 f996 	bl	8000ab8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800078c:	f000 f8a6 	bl	80008dc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000790:	f000 f8e4 	bl	800095c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000794:	481c      	ldr	r0, [pc, #112]	; (8000808 <main+0x90>)
 8000796:	f001 faa3 	bl	8001ce0 <HAL_I2C_EnableListen_IT>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <main+0x2c>
  {
	  Error_Handler();
 80007a0:	f000 fa04 	bl	8000bac <Error_Handler>
  }
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007a4:	2100      	movs	r1, #0
 80007a6:	4819      	ldr	r0, [pc, #100]	; (800080c <main+0x94>)
 80007a8:	f003 fffa 	bl	80047a0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (funcToRun == 0x01) {
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <main+0x98>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d107      	bne.n	80007c4 <main+0x4c>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2108      	movs	r1, #8
 80007b8:	4816      	ldr	r0, [pc, #88]	; (8000814 <main+0x9c>)
 80007ba:	f001 f84b 	bl	8001854 <HAL_GPIO_WritePin>
		funcToRun = 0x00;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <main+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
	}
	if (funcToRun == 0x02) {
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <main+0x98>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d107      	bne.n	80007dc <main+0x64>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2108      	movs	r1, #8
 80007d0:	4810      	ldr	r0, [pc, #64]	; (8000814 <main+0x9c>)
 80007d2:	f001 f83f 	bl	8001854 <HAL_GPIO_WritePin>
		funcToRun = 0x00;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <main+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
	}

	if (funcToRun == 0x03) {
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <main+0x98>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d1e3      	bne.n	80007ac <main+0x34>
		funcToRun = 3;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <main+0x98>)
 80007e6:	2203      	movs	r2, #3
 80007e8:	601a      	str	r2, [r3, #0]
		setServoAngle(180);
 80007ea:	20b4      	movs	r0, #180	; 0xb4
 80007ec:	f7ff ffa4 	bl	8000738 <setServoAngle>
		HAL_Delay(5000);
 80007f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80007f4:	f000 fc44 	bl	8001080 <HAL_Delay>
		setServoAngle(0);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff ff9d 	bl	8000738 <setServoAngle>
		funcToRun = 0x00;
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <main+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
	  if (funcToRun == 0x01) {
 8000804:	e7d2      	b.n	80007ac <main+0x34>
 8000806:	bf00      	nop
 8000808:	20000044 	.word	0x20000044
 800080c:	20000098 	.word	0x20000098
 8000810:	2000016c 	.word	0x2000016c
 8000814:	48000400 	.word	0x48000400

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b096      	sub	sp, #88	; 0x58
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2244      	movs	r2, #68	; 0x44
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f005 fb85 	bl	8005f36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800083a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800083e:	f002 fd71 	bl	8003324 <HAL_PWREx_ControlVoltageScaling>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000848:	f000 f9b0 	bl	8000bac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800084c:	f002 fd4c 	bl	80032e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000850:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <SystemClock_Config+0xc0>)
 8000852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000856:	4a20      	ldr	r2, [pc, #128]	; (80008d8 <SystemClock_Config+0xc0>)
 8000858:	f023 0318 	bic.w	r3, r3, #24
 800085c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000860:	2314      	movs	r3, #20
 8000862:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000868:	2301      	movs	r3, #1
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000870:	2360      	movs	r3, #96	; 0x60
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000878:	2301      	movs	r3, #1
 800087a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800087c:	2301      	movs	r3, #1
 800087e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000880:	2310      	movs	r3, #16
 8000882:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000884:	2307      	movs	r3, #7
 8000886:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4618      	mov	r0, r3
 8000896:	f002 fd9b 	bl	80033d0 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008a0:	f000 f984 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2303      	movs	r3, #3
 80008aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	2101      	movs	r1, #1
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 f99b 	bl	8003bf8 <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008c8:	f000 f970 	bl	8000bac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008cc:	f003 fdae 	bl	800442c <HAL_RCCEx_EnableMSIPLLMode>
}
 80008d0:	bf00      	nop
 80008d2:	3758      	adds	r7, #88	; 0x58
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000

080008dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_I2C1_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_I2C1_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_I2C1_Init+0x74>)
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <MX_I2C1_Init+0x7c>)
 80008ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_I2C1_Init+0x74>)
 80008ee:	2224      	movs	r2, #36	; 0x24
 80008f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_I2C1_Init+0x74>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_I2C1_Init+0x74>)
 800090c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000910:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_I2C1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_I2C1_Init+0x74>)
 800091a:	f000 ffb3 	bl	8001884 <HAL_I2C_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000924:	f000 f942 	bl	8000bac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <MX_I2C1_Init+0x74>)
 800092c:	f002 fc44 	bl	80031b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000936:	f000 f939 	bl	8000bac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_I2C1_Init+0x74>)
 800093e:	f002 fc86 	bl	800324e <HAL_I2CEx_ConfigDigitalFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000948:	f000 f930 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000044 	.word	0x20000044
 8000954:	40005400 	.word	0x40005400
 8000958:	00707cbb 	.word	0x00707cbb

0800095c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b09a      	sub	sp, #104	; 0x68
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	615a      	str	r2, [r3, #20]
 800098e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	222c      	movs	r2, #44	; 0x2c
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f005 facd 	bl	8005f36 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800099c:	4b44      	ldr	r3, [pc, #272]	; (8000ab0 <MX_TIM1_Init+0x154>)
 800099e:	4a45      	ldr	r2, [pc, #276]	; (8000ab4 <MX_TIM1_Init+0x158>)
 80009a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 80009a2:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <MX_TIM1_Init+0x154>)
 80009a4:	2213      	movs	r2, #19
 80009a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <MX_TIM1_Init+0x154>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 80009ae:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <MX_TIM1_Init+0x154>)
 80009b0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80009b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <MX_TIM1_Init+0x154>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009bc:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <MX_TIM1_Init+0x154>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009c2:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <MX_TIM1_Init+0x154>)
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009c8:	4839      	ldr	r0, [pc, #228]	; (8000ab0 <MX_TIM1_Init+0x154>)
 80009ca:	f003 fe31 	bl	8004630 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009d4:	f000 f8ea 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009dc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009e2:	4619      	mov	r1, r3
 80009e4:	4832      	ldr	r0, [pc, #200]	; (8000ab0 <MX_TIM1_Init+0x154>)
 80009e6:	f004 f8cd 	bl	8004b84 <HAL_TIM_ConfigClockSource>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009f0:	f000 f8dc 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009f4:	482e      	ldr	r0, [pc, #184]	; (8000ab0 <MX_TIM1_Init+0x154>)
 80009f6:	f003 fe72 	bl	80046de <HAL_TIM_PWM_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a00:	f000 f8d4 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a14:	4619      	mov	r1, r3
 8000a16:	4826      	ldr	r0, [pc, #152]	; (8000ab0 <MX_TIM1_Init+0x154>)
 8000a18:	f004 fd20 	bl	800545c <HAL_TIMEx_MasterConfigSynchronization>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a22:	f000 f8c3 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a26:	2360      	movs	r3, #96	; 0x60
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 4799;
 8000a2a:	f241 23bf 	movw	r3, #4799	; 0x12bf
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a48:	2200      	movs	r2, #0
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4818      	ldr	r0, [pc, #96]	; (8000ab0 <MX_TIM1_Init+0x154>)
 8000a4e:	f003 ff85 	bl	800495c <HAL_TIM_PWM_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000a58:	f000 f8a8 	bl	8000bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_TIM1_Init+0x154>)
 8000a92:	f004 fd49 	bl	8005528 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000a9c:	f000 f886 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MX_TIM1_Init+0x154>)
 8000aa2:	f000 f95d 	bl	8000d60 <HAL_TIM_MspPostInit>

}
 8000aa6:	bf00      	nop
 8000aa8:	3768      	adds	r7, #104	; 0x68
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000098 	.word	0x20000098
 8000ab4:	40012c00 	.word	0x40012c00

08000ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART2_UART_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <MX_USART2_UART_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART2_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USART2_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART2_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USART2_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USART2_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USART2_UART_Init+0x58>)
 8000afc:	f004 fd8c 	bl	8005618 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 f851 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000e4 	.word	0x200000e4
 8000b14:	40004400 	.word	0x40004400

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_GPIO_Init+0x8c>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2108      	movs	r1, #8
 8000b7a:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <MX_GPIO_Init+0x90>)
 8000b7c:	f000 fe6a 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b80:	2308      	movs	r3, #8
 8000b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4619      	mov	r1, r3
 8000b96:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_GPIO_Init+0x90>)
 8000b98:	f000 fc28 	bl	80013ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3720      	adds	r7, #32
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48000400 	.word	0x48000400

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_MspInit+0x44>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_MspInit+0x44>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6593      	str	r3, [r2, #88]	; 0x58
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_MspInit+0x44>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b09e      	sub	sp, #120	; 0x78
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	2254      	movs	r2, #84	; 0x54
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f005 f988 	bl	8005f36 <memset>
  if(hi2c->Instance==I2C1)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a26      	ldr	r2, [pc, #152]	; (8000cc4 <HAL_I2C_MspInit+0xc4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d145      	bne.n	8000cbc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c30:	2340      	movs	r3, #64	; 0x40
 8000c32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 f9ff 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c48:	f7ff ffb0 	bl	8000bac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <HAL_I2C_MspInit+0xc8>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c50:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <HAL_I2C_MspInit+0xc8>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_I2C_MspInit+0xc8>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c64:	23c0      	movs	r3, #192	; 0xc0
 8000c66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c68:	2312      	movs	r3, #18
 8000c6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c70:	2302      	movs	r3, #2
 8000c72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c74:	2304      	movs	r3, #4
 8000c76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4813      	ldr	r0, [pc, #76]	; (8000ccc <HAL_I2C_MspInit+0xcc>)
 8000c80:	f000 fbb4 	bl	80013ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_I2C_MspInit+0xc8>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c88:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_I2C_MspInit+0xc8>)
 8000c8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_I2C_MspInit+0xc8>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	201f      	movs	r0, #31
 8000ca2:	f000 fb10 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ca6:	201f      	movs	r0, #31
 8000ca8:	f000 fb29 	bl	80012fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2020      	movs	r0, #32
 8000cb2:	f000 fb08 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000cb6:	2020      	movs	r0, #32
 8000cb8:	f000 fb21 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3778      	adds	r7, #120	; 0x78
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000400 	.word	0x48000400

08000cd0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_I2C_MspDeInit+0x44>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d113      	bne.n	8000d0a <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_I2C_MspDeInit+0x48>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <HAL_I2C_MspDeInit+0x48>)
 8000ce8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000cec:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000cee:	2140      	movs	r1, #64	; 0x40
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <HAL_I2C_MspDeInit+0x4c>)
 8000cf2:	f000 fce5 	bl	80016c0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <HAL_I2C_MspDeInit+0x4c>)
 8000cfa:	f000 fce1 	bl	80016c0 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8000cfe:	201f      	movs	r0, #31
 8000d00:	f000 fb0b 	bl	800131a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8000d04:	2020      	movs	r0, #32
 8000d06:	f000 fb08 	bl	800131a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40005400 	.word	0x40005400
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	48000400 	.word	0x48000400

08000d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_TIM_Base_MspInit+0x38>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d10b      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_TIM_Base_MspInit+0x3c>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <HAL_TIM_Base_MspInit+0x3c>)
 8000d38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <HAL_TIM_Base_MspInit+0x3c>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40012c00 	.word	0x40012c00
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <HAL_TIM_MspPostInit+0x68>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d11d      	bne.n	8000dbe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_TIM_MspPostInit+0x6c>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a11      	ldr	r2, [pc, #68]	; (8000dcc <HAL_TIM_MspPostInit+0x6c>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_TIM_MspPostInit+0x6c>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f000 fb17 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40012c00 	.word	0x40012c00
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b09e      	sub	sp, #120	; 0x78
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	2254      	movs	r2, #84	; 0x54
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f005 f8a0 	bl	8005f36 <memset>
  if(huart->Instance==USART2)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a28      	ldr	r2, [pc, #160]	; (8000e9c <HAL_UART_MspInit+0xcc>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d148      	bne.n	8000e92 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f003 f917 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e18:	f7ff fec8 	bl	8000bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <HAL_UART_MspInit+0xd0>)
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e20:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <HAL_UART_MspInit+0xd0>)
 8000e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e26:	6593      	str	r3, [r2, #88]	; 0x58
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_UART_MspInit+0xd0>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <HAL_UART_MspInit+0xd0>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e38:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <HAL_UART_MspInit+0xd0>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_UART_MspInit+0xd0>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5c:	2307      	movs	r3, #7
 8000e5e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f000 fabf 	bl	80013ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e80:	2303      	movs	r3, #3
 8000e82:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f000 faad 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3778      	adds	r7, #120	; 0x78
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40004400 	.word	0x40004400
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <NMI_Handler+0x4>

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef0:	f000 f8a6 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <I2C1_EV_IRQHandler+0x10>)
 8000efe:	f000 ff0f 	bl	8001d20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000044 	.word	0x20000044

08000f0c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <I2C1_ER_IRQHandler+0x10>)
 8000f12:	f000 ff1f 	bl	8001d54 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000044 	.word	0x20000044

08000f20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f48:	f7ff ffea 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LoopForever+0xe>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <LoopForever+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f72:	f004 ffe9 	bl	8005f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f76:	f7ff fbff 	bl	8000778 <main>

08000f7a <LoopForever>:

LoopForever:
    b LoopForever
 8000f7a:	e7fe      	b.n	8000f7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f88:	08006000 	.word	0x08006000
  ldr r2, =_sbss
 8000f8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f90:	20000174 	.word	0x20000174

08000f94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_IRQHandler>

08000f96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f985 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f80e 	bl	8000fc8 <HAL_InitTick>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e001      	b.n	8000fbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb8:	f7ff fdfe 	bl	8000bb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_InitTick+0x6c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d023      	beq.n	8001024 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_InitTick+0x70>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_InitTick+0x6c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f99f 	bl	8001336 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10f      	bne.n	800101e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d809      	bhi.n	8001018 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800100c:	f000 f95b 	bl	80012c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_InitTick+0x74>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e007      	b.n	8001028 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e004      	b.n	8001028 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e001      	b.n	8001028 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008
 8001038:	20000000 	.word	0x20000000
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	20000170 	.word	0x20000170

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000170 	.word	0x20000170

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db12      	blt.n	80011a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	490a      	ldr	r1, [pc, #40]	; (80011ac <__NVIC_DisableIRQ+0x44>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2001      	movs	r0, #1
 800118a:	fa00 f202 	lsl.w	r2, r0, r2
 800118e:	3320      	adds	r3, #32
 8001190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001194:	f3bf 8f4f 	dsb	sy
}
 8001198:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800119a:	f3bf 8f6f 	isb	sy
}
 800119e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001290:	f7ff ff8e 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff05 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff1a 	bl	8001110 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff8e 	bl	8001204 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5d 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff0d 	bl	800112c <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff1d 	bl	8001168 <__NVIC_DisableIRQ>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff94 	bl	800126c <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d005      	beq.n	8001372 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2204      	movs	r2, #4
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e029      	b.n	80013c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 020e 	bic.w	r2, r2, #14
 8001380:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f003 021c 	and.w	r2, r3, #28
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	4798      	blx	r3
    }
  }
  return status;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013de:	b2db      	uxtb	r3, r3
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fa:	e148      	b.n	800168e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 813a 	beq.w	8001688 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d005      	beq.n	800142c <HAL_GPIO_Init+0x40>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d130      	bne.n	800148e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001462:	2201      	movs	r2, #1
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f003 0201 	and.w	r2, r3, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b03      	cmp	r3, #3
 8001498:	d017      	beq.n	80014ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d123      	bne.n	800151e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	08da      	lsrs	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3208      	adds	r2, #8
 8001518:	6939      	ldr	r1, [r7, #16]
 800151a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0203 	and.w	r2, r3, #3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8094 	beq.w	8001688 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001560:	4b52      	ldr	r3, [pc, #328]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001564:	4a51      	ldr	r2, [pc, #324]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6613      	str	r3, [r2, #96]	; 0x60
 800156c:	4b4f      	ldr	r3, [pc, #316]	; (80016ac <HAL_GPIO_Init+0x2c0>)
 800156e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001578:	4a4d      	ldr	r2, [pc, #308]	; (80016b0 <HAL_GPIO_Init+0x2c4>)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015a2:	d00d      	beq.n	80015c0 <HAL_GPIO_Init+0x1d4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a43      	ldr	r2, [pc, #268]	; (80016b4 <HAL_GPIO_Init+0x2c8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d007      	beq.n	80015bc <HAL_GPIO_Init+0x1d0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a42      	ldr	r2, [pc, #264]	; (80016b8 <HAL_GPIO_Init+0x2cc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d101      	bne.n	80015b8 <HAL_GPIO_Init+0x1cc>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e004      	b.n	80015c2 <HAL_GPIO_Init+0x1d6>
 80015b8:	2307      	movs	r3, #7
 80015ba:	e002      	b.n	80015c2 <HAL_GPIO_Init+0x1d6>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <HAL_GPIO_Init+0x1d6>
 80015c0:	2300      	movs	r3, #0
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	f002 0203 	and.w	r2, r2, #3
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	4093      	lsls	r3, r2
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015d2:	4937      	ldr	r1, [pc, #220]	; (80016b0 <HAL_GPIO_Init+0x2c4>)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e0:	4b36      	ldr	r3, [pc, #216]	; (80016bc <HAL_GPIO_Init+0x2d0>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001604:	4a2d      	ldr	r2, [pc, #180]	; (80016bc <HAL_GPIO_Init+0x2d0>)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <HAL_GPIO_Init+0x2d0>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800162e:	4a23      	ldr	r2, [pc, #140]	; (80016bc <HAL_GPIO_Init+0x2d0>)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_GPIO_Init+0x2d0>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001658:	4a18      	ldr	r2, [pc, #96]	; (80016bc <HAL_GPIO_Init+0x2d0>)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_GPIO_Init+0x2d0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_GPIO_Init+0x2d0>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	fa22 f303 	lsr.w	r3, r2, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	f47f aeaf 	bne.w	80013fc <HAL_GPIO_Init+0x10>
  }
}
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000
 80016b4:	48000400 	.word	0x48000400
 80016b8:	48000800 	.word	0x48000800
 80016bc:	40010400 	.word	0x40010400

080016c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80016ce:	e0ab      	b.n	8001828 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80016d0:	2201      	movs	r2, #1
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 809e 	beq.w	8001822 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80016e6:	4a57      	ldr	r2, [pc, #348]	; (8001844 <HAL_GPIO_DeInit+0x184>)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	220f      	movs	r2, #15
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800170e:	d00d      	beq.n	800172c <HAL_GPIO_DeInit+0x6c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a4d      	ldr	r2, [pc, #308]	; (8001848 <HAL_GPIO_DeInit+0x188>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d007      	beq.n	8001728 <HAL_GPIO_DeInit+0x68>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a4c      	ldr	r2, [pc, #304]	; (800184c <HAL_GPIO_DeInit+0x18c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_GPIO_DeInit+0x64>
 8001720:	2302      	movs	r3, #2
 8001722:	e004      	b.n	800172e <HAL_GPIO_DeInit+0x6e>
 8001724:	2307      	movs	r3, #7
 8001726:	e002      	b.n	800172e <HAL_GPIO_DeInit+0x6e>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_GPIO_DeInit+0x6e>
 800172c:	2300      	movs	r3, #0
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	f002 0203 	and.w	r2, r2, #3
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	4093      	lsls	r3, r2
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	429a      	cmp	r2, r3
 800173c:	d132      	bne.n	80017a4 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800173e:	4b44      	ldr	r3, [pc, #272]	; (8001850 <HAL_GPIO_DeInit+0x190>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	43db      	mvns	r3, r3
 8001746:	4942      	ldr	r1, [pc, #264]	; (8001850 <HAL_GPIO_DeInit+0x190>)
 8001748:	4013      	ands	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800174c:	4b40      	ldr	r3, [pc, #256]	; (8001850 <HAL_GPIO_DeInit+0x190>)
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	493e      	ldr	r1, [pc, #248]	; (8001850 <HAL_GPIO_DeInit+0x190>)
 8001756:	4013      	ands	r3, r2
 8001758:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_GPIO_DeInit+0x190>)
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	493b      	ldr	r1, [pc, #236]	; (8001850 <HAL_GPIO_DeInit+0x190>)
 8001764:	4013      	ands	r3, r2
 8001766:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001768:	4b39      	ldr	r3, [pc, #228]	; (8001850 <HAL_GPIO_DeInit+0x190>)
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	4937      	ldr	r1, [pc, #220]	; (8001850 <HAL_GPIO_DeInit+0x190>)
 8001772:	4013      	ands	r3, r2
 8001774:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001786:	4a2f      	ldr	r2, [pc, #188]	; (8001844 <HAL_GPIO_DeInit+0x184>)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	43da      	mvns	r2, r3
 8001796:	482b      	ldr	r0, [pc, #172]	; (8001844 <HAL_GPIO_DeInit+0x184>)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	400a      	ands	r2, r1
 800179e:	3302      	adds	r3, #2
 80017a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2103      	movs	r1, #3
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	08da      	lsrs	r2, r3, #3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3208      	adds	r2, #8
 80017c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	220f      	movs	r2, #15
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	08d2      	lsrs	r2, r2, #3
 80017d8:	4019      	ands	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2103      	movs	r1, #3
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	401a      	ands	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	2101      	movs	r1, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2103      	movs	r1, #3
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	401a      	ands	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	f47f af4d 	bne.w	80016d0 <HAL_GPIO_DeInit+0x10>
  }
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40010000 	.word	0x40010000
 8001848:	48000400 	.word	0x48000400
 800184c:	48000800 	.word	0x48000800
 8001850:	40010400 	.word	0x40010400

08001854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001870:	e002      	b.n	8001878 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e08d      	b.n	80019b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff f9a8 	bl	8000c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2224      	movs	r2, #36	; 0x24
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0201 	bic.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	e006      	b.n	800190c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800190a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d108      	bne.n	8001926 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	e007      	b.n	8001936 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001934:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001948:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001958:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69d9      	ldr	r1, [r3, #28]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1a      	ldr	r2, [r3, #32]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2220      	movs	r2, #32
 800199e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e021      	b.n	8001a10 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2224      	movs	r2, #36	; 0x24
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff f973 	bl	8000cd0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	4613      	mov	r3, r2
 8001a26:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001a34:	2b28      	cmp	r3, #40	; 0x28
 8001a36:	f040 8098 	bne.w	8001b6a <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d105      	bne.n	8001a52 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e08c      	b.n	8001b6c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001a52:	f248 0101 	movw	r1, #32769	; 0x8001
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f001 fb50 	bl	80030fc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e080      	b.n	8001b6c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8001a7c:	d12a      	bne.n	8001ad4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001a7e:	2102      	movs	r1, #2
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f001 fb3b 	bl	80030fc <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a94:	d11e      	bne.n	8001ad4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aa4:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d012      	beq.n	8001ad4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab2:	4a30      	ldr	r2, [pc, #192]	; (8001b74 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fc47 	bl	800134e <HAL_DMA_Abort_IT>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2229      	movs	r2, #41	; 0x29
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001af8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	88fa      	ldrh	r2, [r7, #6]
 8001b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8001b1a:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	bf0c      	ite	eq
 8001b2a:	2301      	moveq	r3, #1
 8001b2c:	2300      	movne	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d106      	bne.n	8001b54 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2208      	movs	r2, #8
 8001b52:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001b5c:	f248 0101 	movw	r1, #32769	; 0x8001
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f001 fa47 	bl	8002ff4 <I2C_Enable_IRQ>

    return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
  }
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	08002f53 	.word	0x08002f53
 8001b78:	08001e87 	.word	0x08001e87

08001b7c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001b98:	2b28      	cmp	r3, #40	; 0x28
 8001b9a:	f040 8098 	bne.w	8001cce <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e08c      	b.n	8001cd0 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001bb6:	f248 0102 	movw	r1, #32770	; 0x8002
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f001 fa9e 	bl	80030fc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e080      	b.n	8001cd0 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b29      	cmp	r3, #41	; 0x29
 8001be0:	d12a      	bne.n	8001c38 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001be2:	2101      	movs	r1, #1
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f001 fa89 	bl	80030fc <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bf8:	d11e      	bne.n	8001c38 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c08:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d012      	beq.n	8001c38 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c16:	4a30      	ldr	r2, [pc, #192]	; (8001cd8 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fb95 	bl	800134e <HAL_DMA_Abort_IT>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d006      	beq.n	8001c38 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c34:	4610      	mov	r0, r2
 8001c36:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	222a      	movs	r2, #42	; 0x2a
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c5c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	88fa      	ldrh	r2, [r7, #6]
 8001c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8001c7e:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	bf0c      	ite	eq
 8001c8e:	2301      	moveq	r3, #1
 8001c90:	2300      	movne	r3, #0
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001cc0:	f248 0102 	movw	r1, #32770	; 0x8002
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f001 f995 	bl	8002ff4 <I2C_Enable_IRQ>

    return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
  }
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	08002f53 	.word	0x08002f53
 8001cdc:	08001e87 	.word	0x08001e87

08001ce0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d10d      	bne.n	8001d10 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2228      	movs	r2, #40	; 0x28
 8001cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <HAL_I2C_EnableListen_IT+0x3c>)
 8001d00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f001 f974 	bl	8002ff4 <I2C_Enable_IRQ>

    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
  }
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	08001e87 	.word	0x08001e87

08001d20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	68f9      	ldr	r1, [r7, #12]
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	4798      	blx	r3
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00f      	beq.n	8001d96 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00a      	beq.n	8001d96 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d94:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00f      	beq.n	8001dc0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f043 0208 	orr.w	r2, r3, #8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dbe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00f      	beq.n	8001dea <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	f043 0202 	orr.w	r2, r3, #2
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 030b 	and.w	r3, r3, #11
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001dfa:	68f9      	ldr	r1, [r7, #12]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 ff6d 	bl	8002cdc <I2C_ITError>
  }
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <I2C_Slave_ISR_IT+0x24>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e0e1      	b.n	800206e <I2C_Slave_ISR_IT+0x1e8>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001ec6:	6939      	ldr	r1, [r7, #16]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 fda1 	bl	8002a10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d04b      	beq.n	8001f70 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d046      	beq.n	8001f70 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d128      	bne.n	8001f3e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b28      	cmp	r3, #40	; 0x28
 8001ef6:	d108      	bne.n	8001f0a <I2C_Slave_ISR_IT+0x84>
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001efe:	d104      	bne.n	8001f0a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f00:	6939      	ldr	r1, [r7, #16]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 fe96 	bl	8002c34 <I2C_ITListenCplt>
 8001f08:	e031      	b.n	8001f6e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b29      	cmp	r3, #41	; 0x29
 8001f14:	d10e      	bne.n	8001f34 <I2C_Slave_ISR_IT+0xae>
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f1c:	d00a      	beq.n	8001f34 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2210      	movs	r2, #16
 8001f24:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 ffef 	bl	8002f0a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 fc4a 	bl	80027c6 <I2C_ITSlaveSeqCplt>
 8001f32:	e01c      	b.n	8001f6e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001f3c:	e08f      	b.n	800205e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2210      	movs	r2, #16
 8001f44:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f043 0204 	orr.w	r2, r3, #4
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <I2C_Slave_ISR_IT+0xda>
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5e:	d17e      	bne.n	800205e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	4619      	mov	r1, r3
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 feb8 	bl	8002cdc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001f6c:	e077      	b.n	800205e <I2C_Slave_ISR_IT+0x1d8>
 8001f6e:	e076      	b.n	800205e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d02f      	beq.n	8001fda <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d02a      	beq.n	8001fda <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d018      	beq.n	8001fc0 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d14b      	bne.n	8002062 <I2C_Slave_ISR_IT+0x1dc>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fd0:	d047      	beq.n	8002062 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fbf7 	bl	80027c6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001fd8:	e043      	b.n	8002062 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d004      	beq.n	8001ff8 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001fee:	6939      	ldr	r1, [r7, #16]
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 fb27 	bl	8002644 <I2C_ITAddrCplt>
 8001ff6:	e035      	b.n	8002064 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d030      	beq.n	8002064 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002008:	2b00      	cmp	r3, #0
 800200a:	d02b      	beq.n	8002064 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d018      	beq.n	8002048 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	851a      	strh	r2, [r3, #40]	; 0x28
 8002046:	e00d      	b.n	8002064 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800204e:	d002      	beq.n	8002056 <I2C_Slave_ISR_IT+0x1d0>
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fbb5 	bl	80027c6 <I2C_ITSlaveSeqCplt>
 800205c:	e002      	b.n	8002064 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800205e:	bf00      	nop
 8002060:	e000      	b.n	8002064 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002062:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b088      	sub	sp, #32
 800207a:	af02      	add	r7, sp, #8
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <I2C_Master_ISR_DMA+0x1a>
 800208c:	2302      	movs	r3, #2
 800208e:	e0d9      	b.n	8002244 <I2C_Master_ISR_DMA+0x1ce>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d016      	beq.n	80020d0 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d011      	beq.n	80020d0 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2210      	movs	r2, #16
 80020b2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	f043 0204 	orr.w	r2, r3, #4
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80020c0:	2120      	movs	r1, #32
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 ff96 	bl	8002ff4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 ff1e 	bl	8002f0a <I2C_Flush_TXDR>
 80020ce:	e0b4      	b.n	800223a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d071      	beq.n	80021be <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d06c      	beq.n	80021be <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020f2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d04e      	beq.n	800219c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	b29b      	uxth	r3, r3
 8002106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800210a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002110:	b29b      	uxth	r3, r3
 8002112:	2bff      	cmp	r3, #255	; 0xff
 8002114:	d906      	bls.n	8002124 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	22ff      	movs	r2, #255	; 0xff
 800211a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800211c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e010      	b.n	8002146 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002136:	d003      	beq.n	8002140 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e002      	b.n	8002146 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002140:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002144:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214a:	b2da      	uxtb	r2, r3
 800214c:	8a79      	ldrh	r1, [r7, #18]
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 ff1b 	bl	8002f90 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b22      	cmp	r3, #34	; 0x22
 8002176:	d108      	bne.n	800218a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002186:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002188:	e057      	b.n	800223a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002198:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800219a:	e04e      	b.n	800223a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021aa:	d003      	beq.n	80021b4 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 facd 	bl	800274c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80021b2:	e042      	b.n	800223a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80021b4:	2140      	movs	r1, #64	; 0x40
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fd90 	bl	8002cdc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80021bc:	e03d      	b.n	800223a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d028      	beq.n	800221a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d023      	beq.n	800221a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d119      	bne.n	8002210 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021ea:	d025      	beq.n	8002238 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021f4:	d108      	bne.n	8002208 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002204:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002206:	e017      	b.n	8002238 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fa9f 	bl	800274c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800220e:	e013      	b.n	8002238 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002210:	2140      	movs	r1, #64	; 0x40
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fd62 	bl	8002cdc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002218:	e00e      	b.n	8002238 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fb25 	bl	8002880 <I2C_ITMasterCplt>
 8002236:	e000      	b.n	800223a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002238:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af02      	add	r7, sp, #8
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002258:	4b8d      	ldr	r3, [pc, #564]	; (8002490 <I2C_Mem_ISR_DMA+0x244>)
 800225a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <I2C_Mem_ISR_DMA+0x1e>
 8002266:	2302      	movs	r3, #2
 8002268:	e10e      	b.n	8002488 <I2C_Mem_ISR_DMA+0x23c>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	d016      	beq.n	80022aa <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002282:	2b00      	cmp	r3, #0
 8002284:	d011      	beq.n	80022aa <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2210      	movs	r2, #16
 800228c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f043 0204 	orr.w	r2, r3, #4
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800229a:	2120      	movs	r1, #32
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fea9 	bl	8002ff4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fe31 	bl	8002f0a <I2C_Flush_TXDR>
 80022a8:	e0e9      	b.n	800247e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00e      	beq.n	80022d2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022ce:	651a      	str	r2, [r3, #80]	; 0x50
 80022d0:	e0d5      	b.n	800247e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d05f      	beq.n	800239c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d05a      	beq.n	800239c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80022e6:	2101      	movs	r1, #1
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 ff07 	bl	80030fc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80022ee:	2110      	movs	r1, #16
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fe7f 	bl	8002ff4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d048      	beq.n	8002392 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	2bff      	cmp	r3, #255	; 0xff
 8002308:	d910      	bls.n	800232c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	22ff      	movs	r2, #255	; 0xff
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002314:	b299      	uxth	r1, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	b2da      	uxtb	r2, r3
 800231c:	2300      	movs	r3, #0
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fe33 	bl	8002f90 <I2C_TransferConfig>
 800232a:	e011      	b.n	8002350 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	b299      	uxth	r1, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	b2da      	uxtb	r2, r3
 8002342:	2300      	movs	r3, #0
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fe20 	bl	8002f90 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b22      	cmp	r3, #34	; 0x22
 800236c:	d108      	bne.n	8002380 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800237c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800237e:	e07e      	b.n	800247e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800238e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002390:	e075      	b.n	800247e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002392:	2140      	movs	r1, #64	; 0x40
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fca1 	bl	8002cdc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800239a:	e070      	b.n	800247e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d05d      	beq.n	8002462 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d058      	beq.n	8002462 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80023b0:	2101      	movs	r1, #1
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fea2 	bl	80030fc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80023b8:	2110      	movs	r1, #16
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fe1a 	bl	8002ff4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b22      	cmp	r3, #34	; 0x22
 80023ca:	d101      	bne.n	80023d0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80023cc:	4b31      	ldr	r3, [pc, #196]	; (8002494 <I2C_Mem_ISR_DMA+0x248>)
 80023ce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2bff      	cmp	r3, #255	; 0xff
 80023d8:	d910      	bls.n	80023fc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	22ff      	movs	r2, #255	; 0xff
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	b299      	uxth	r1, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fdcb 	bl	8002f90 <I2C_TransferConfig>
 80023fa:	e011      	b.n	8002420 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	b299      	uxth	r1, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	b2da      	uxtb	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fdb8 	bl	8002f90 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b22      	cmp	r3, #34	; 0x22
 800243c:	d108      	bne.n	8002450 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800244c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800244e:	e016      	b.n	800247e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800245e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002460:	e00d      	b.n	800247e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fa01 	bl	8002880 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	80002000 	.word	0x80002000
 8002494:	80002400 	.word	0x80002400

08002498 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <I2C_Slave_ISR_DMA+0x24>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e0bf      	b.n	800263c <I2C_Slave_ISR_DMA+0x1a4>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fa98 	bl	8002a10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8095 	beq.w	8002616 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 808f 	beq.w	8002616 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d104      	bne.n	800250c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002508:	2b00      	cmp	r3, #0
 800250a:	d07d      	beq.n	8002608 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00c      	beq.n	800252e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 800252a:	2301      	movs	r3, #1
 800252c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00c      	beq.n	8002550 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 800254c:	2301      	movs	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d128      	bne.n	80025a8 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b28      	cmp	r3, #40	; 0x28
 8002560:	d108      	bne.n	8002574 <I2C_Slave_ISR_DMA+0xdc>
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002568:	d104      	bne.n	8002574 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fb61 	bl	8002c34 <I2C_ITListenCplt>
 8002572:	e048      	b.n	8002606 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b29      	cmp	r3, #41	; 0x29
 800257e:	d10e      	bne.n	800259e <I2C_Slave_ISR_DMA+0x106>
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002586:	d00a      	beq.n	800259e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2210      	movs	r2, #16
 800258e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fcba 	bl	8002f0a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f915 	bl	80027c6 <I2C_ITSlaveSeqCplt>
 800259c:	e033      	b.n	8002606 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2210      	movs	r2, #16
 80025a4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80025a6:	e034      	b.n	8002612 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2210      	movs	r2, #16
 80025ae:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f043 0204 	orr.w	r2, r3, #4
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <I2C_Slave_ISR_DMA+0x13a>
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d0:	d11f      	bne.n	8002612 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	2b21      	cmp	r3, #33	; 0x21
 80025d6:	d002      	beq.n	80025de <I2C_Slave_ISR_DMA+0x146>
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	2b29      	cmp	r3, #41	; 0x29
 80025dc:	d103      	bne.n	80025e6 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2221      	movs	r2, #33	; 0x21
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
 80025e4:	e008      	b.n	80025f8 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
 80025e8:	2b22      	cmp	r3, #34	; 0x22
 80025ea:	d002      	beq.n	80025f2 <I2C_Slave_ISR_DMA+0x15a>
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	2b2a      	cmp	r3, #42	; 0x2a
 80025f0:	d102      	bne.n	80025f8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2222      	movs	r2, #34	; 0x22
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	4619      	mov	r1, r3
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fb6c 	bl	8002cdc <I2C_ITError>
      if (treatdmanack == 1U)
 8002604:	e005      	b.n	8002612 <I2C_Slave_ISR_DMA+0x17a>
 8002606:	e004      	b.n	8002612 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2210      	movs	r2, #16
 800260e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002610:	e00f      	b.n	8002632 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8002612:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002614:	e00d      	b.n	8002632 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f809 	bl	8002644 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800265a:	2b28      	cmp	r3, #40	; 0x28
 800265c:	d16a      	bne.n	8002734 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	b29b      	uxth	r3, r3
 8002678:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800267c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	b29b      	uxth	r3, r3
 8002686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	b29b      	uxth	r3, r3
 8002694:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002698:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d138      	bne.n	8002714 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	09db      	lsrs	r3, r3, #7
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	89bb      	ldrh	r3, [r7, #12]
 80026aa:	4053      	eors	r3, r2
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f003 0306 	and.w	r3, r3, #6
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11c      	bne.n	80026f0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80026b6:	897b      	ldrh	r3, [r7, #10]
 80026b8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d13b      	bne.n	8002744 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2208      	movs	r2, #8
 80026d8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026e2:	89ba      	ldrh	r2, [r7, #12]
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7fd ff41 	bl	8000570 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80026ee:	e029      	b.n	8002744 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80026f0:	893b      	ldrh	r3, [r7, #8]
 80026f2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80026f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fcff 	bl	80030fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002706:	89ba      	ldrh	r2, [r7, #12]
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7fd ff2f 	bl	8000570 <HAL_I2C_AddrCallback>
}
 8002712:	e017      	b.n	8002744 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fcef 	bl	80030fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002726:	89ba      	ldrh	r2, [r7, #12]
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7fd ff1f 	bl	8000570 <HAL_I2C_AddrCallback>
}
 8002732:	e007      	b.n	8002744 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2208      	movs	r2, #8
 800273a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b21      	cmp	r3, #33	; 0x21
 8002766:	d115      	bne.n	8002794 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2211      	movs	r2, #17
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800277c:	2101      	movs	r1, #1
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fcbc 	bl	80030fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff fb3c 	bl	8001e0a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002792:	e014      	b.n	80027be <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2212      	movs	r2, #18
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80027a8:	2102      	movs	r1, #2
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fca6 	bl	80030fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff fb30 	bl	8001e1e <HAL_I2C_MasterRxCpltCallback>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e00c      	b.n	8002814 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002812:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b29      	cmp	r3, #41	; 0x29
 800281e:	d112      	bne.n	8002846 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2228      	movs	r2, #40	; 0x28
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2221      	movs	r2, #33	; 0x21
 800282c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800282e:	2101      	movs	r1, #1
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fc63 	bl	80030fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fd fed8 	bl	80005f4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002844:	e017      	b.n	8002876 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b2a      	cmp	r3, #42	; 0x2a
 8002850:	d111      	bne.n	8002876 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2228      	movs	r2, #40	; 0x28
 8002856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2222      	movs	r2, #34	; 0x22
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002860:	2102      	movs	r1, #2
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fc4a 	bl	80030fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fd fee1 	bl	8000638 <HAL_I2C_SlaveRxCpltCallback>
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2220      	movs	r2, #32
 8002894:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b21      	cmp	r3, #33	; 0x21
 80028a0:	d107      	bne.n	80028b2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028a2:	2101      	movs	r1, #1
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fc29 	bl	80030fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2211      	movs	r2, #17
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
 80028b0:	e00c      	b.n	80028cc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b22      	cmp	r3, #34	; 0x22
 80028bc:	d106      	bne.n	80028cc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80028be:	2102      	movs	r1, #2
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fc1b 	bl	80030fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2212      	movs	r2, #18
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b4c      	ldr	r3, [pc, #304]	; (8002a08 <I2C_ITMasterCplt+0x188>)
 80028d8:	400b      	ands	r3, r1
 80028da:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a49      	ldr	r2, [pc, #292]	; (8002a0c <I2C_ITMasterCplt+0x18c>)
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2210      	movs	r2, #16
 80028f8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f043 0204 	orr.w	r2, r3, #4
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b60      	cmp	r3, #96	; 0x60
 8002910:	d10a      	bne.n	8002928 <I2C_ITMasterCplt+0xa8>
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	b2db      	uxtb	r3, r3
 8002924:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002926:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 faee 	bl	8002f0a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b60      	cmp	r3, #96	; 0x60
 800293e:	d002      	beq.n	8002946 <I2C_ITMasterCplt+0xc6>
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	4619      	mov	r1, r3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f9c5 	bl	8002cdc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002952:	e054      	b.n	80029fe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b21      	cmp	r3, #33	; 0x21
 800295e:	d124      	bne.n	80029aa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d10b      	bne.n	8002992 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff fa51 	bl	8001e32 <HAL_I2C_MemTxCpltCallback>
}
 8002990:	e035      	b.n	80029fe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fa31 	bl	8001e0a <HAL_I2C_MasterTxCpltCallback>
}
 80029a8:	e029      	b.n	80029fe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b22      	cmp	r3, #34	; 0x22
 80029b4:	d123      	bne.n	80029fe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b40      	cmp	r3, #64	; 0x40
 80029ce:	d10b      	bne.n	80029e8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fa30 	bl	8001e46 <HAL_I2C_MemRxCpltCallback>
}
 80029e6:	e00a      	b.n	80029fe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff fa10 	bl	8001e1e <HAL_I2C_MasterRxCpltCallback>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	fe00e800 	.word	0xfe00e800
 8002a0c:	ffff0000 	.word	0xffff0000

08002a10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2220      	movs	r2, #32
 8002a34:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b21      	cmp	r3, #33	; 0x21
 8002a3a:	d002      	beq.n	8002a42 <I2C_ITSlaveCplt+0x32>
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b29      	cmp	r3, #41	; 0x29
 8002a40:	d108      	bne.n	8002a54 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002a42:	f248 0101 	movw	r1, #32769	; 0x8001
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fb58 	bl	80030fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2221      	movs	r2, #33	; 0x21
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
 8002a52:	e019      	b.n	8002a88 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b22      	cmp	r3, #34	; 0x22
 8002a58:	d002      	beq.n	8002a60 <I2C_ITSlaveCplt+0x50>
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a5e:	d108      	bne.n	8002a72 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002a60:	f248 0102 	movw	r1, #32770	; 0x8002
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fb49 	bl	80030fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2222      	movs	r2, #34	; 0x22
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a70:	e00a      	b.n	8002a88 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b28      	cmp	r3, #40	; 0x28
 8002a76:	d107      	bne.n	8002a88 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002a78:	f248 0103 	movw	r1, #32771	; 0x8003
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fb3d 	bl	80030fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a96:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6859      	ldr	r1, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b62      	ldr	r3, [pc, #392]	; (8002c2c <I2C_ITSlaveCplt+0x21c>)
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fa2e 	bl	8002f0a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ac6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01f      	beq.n	8002b10 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ade:	e017      	b.n	8002b10 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d012      	beq.n	8002b10 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002af8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d020      	beq.n	8002b5c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f043 0204 	orr.w	r2, r3, #4
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8a4 	bl	8002cdc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b28      	cmp	r3, #40	; 0x28
 8002b9e:	d141      	bne.n	8002c24 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ba0:	6979      	ldr	r1, [r7, #20]
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f846 	bl	8002c34 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ba8:	e03c      	b.n	8002c24 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bb2:	d014      	beq.n	8002bde <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff fe06 	bl	80027c6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a1c      	ldr	r2, [pc, #112]	; (8002c30 <I2C_ITSlaveCplt+0x220>)
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fd fcbe 	bl	8000558 <HAL_I2C_ListenCpltCallback>
}
 8002bdc:	e022      	b.n	8002c24 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b22      	cmp	r3, #34	; 0x22
 8002be8:	d10e      	bne.n	8002c08 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7fd fd19 	bl	8000638 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c06:	e00d      	b.n	8002c24 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fd fce8 	bl	80005f4 <HAL_I2C_SlaveTxCpltCallback>
}
 8002c24:	bf00      	nop
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	fe00e800 	.word	0xfe00e800
 8002c30:	ffff0000 	.word	0xffff0000

08002c34 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a25      	ldr	r2, [pc, #148]	; (8002cd8 <I2C_ITListenCplt+0xa4>)
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d022      	beq.n	8002cb0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d012      	beq.n	8002cb0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca8:	f043 0204 	orr.w	r2, r3, #4
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002cb0:	f248 0103 	movw	r1, #32771	; 0x8003
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fa21 	bl	80030fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fd fc44 	bl	8000558 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	ffff0000 	.word	0xffff0000

08002cdc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cec:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a6d      	ldr	r2, [pc, #436]	; (8002eb0 <I2C_ITError+0x1d4>)
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b28      	cmp	r3, #40	; 0x28
 8002d12:	d005      	beq.n	8002d20 <I2C_ITError+0x44>
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b29      	cmp	r3, #41	; 0x29
 8002d18:	d002      	beq.n	8002d20 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d1e:	d10b      	bne.n	8002d38 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d20:	2103      	movs	r1, #3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f9ea 	bl	80030fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2228      	movs	r2, #40	; 0x28
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a60      	ldr	r2, [pc, #384]	; (8002eb4 <I2C_ITError+0x1d8>)
 8002d34:	635a      	str	r2, [r3, #52]	; 0x34
 8002d36:	e030      	b.n	8002d9a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d38:	f248 0103 	movw	r1, #32771	; 0x8003
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f9dd 	bl	80030fc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8e1 	bl	8002f0a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b60      	cmp	r3, #96	; 0x60
 8002d52:	d01f      	beq.n	8002d94 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d114      	bne.n	8002d94 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d109      	bne.n	8002d8c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	f043 0204 	orr.w	r2, r3, #4
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2220      	movs	r2, #32
 8002d92:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d039      	beq.n	8002e1c <I2C_ITError+0x140>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b11      	cmp	r3, #17
 8002dac:	d002      	beq.n	8002db4 <I2C_ITError+0xd8>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b21      	cmp	r3, #33	; 0x21
 8002db2:	d133      	bne.n	8002e1c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dc2:	d107      	bne.n	8002dd4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dd2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe faf9 	bl	80013d0 <HAL_DMA_GetState>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d017      	beq.n	8002e14 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	4a33      	ldr	r2, [pc, #204]	; (8002eb8 <I2C_ITError+0x1dc>)
 8002dea:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe faa8 	bl	800134e <HAL_DMA_Abort_IT>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d04d      	beq.n	8002ea0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e12:	e045      	b.n	8002ea0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f851 	bl	8002ebc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e1a:	e041      	b.n	8002ea0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d039      	beq.n	8002e98 <I2C_ITError+0x1bc>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b12      	cmp	r3, #18
 8002e28:	d002      	beq.n	8002e30 <I2C_ITError+0x154>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b22      	cmp	r3, #34	; 0x22
 8002e2e:	d133      	bne.n	8002e98 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3e:	d107      	bne.n	8002e50 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e4e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fe fabb 	bl	80013d0 <HAL_DMA_GetState>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d017      	beq.n	8002e90 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <I2C_ITError+0x1dc>)
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe fa6a 	bl	800134e <HAL_DMA_Abort_IT>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d011      	beq.n	8002ea4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e8e:	e009      	b.n	8002ea4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f813 	bl	8002ebc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e96:	e005      	b.n	8002ea4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f80f 	bl	8002ebc <I2C_TreatErrorCallback>
  }
}
 8002e9e:	e002      	b.n	8002ea6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ea0:	bf00      	nop
 8002ea2:	e000      	b.n	8002ea6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ea4:	bf00      	nop
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	ffff0000 	.word	0xffff0000
 8002eb4:	08001e87 	.word	0x08001e87
 8002eb8:	08002f53 	.word	0x08002f53

08002ebc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b60      	cmp	r3, #96	; 0x60
 8002ece:	d10e      	bne.n	8002eee <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe ffb7 	bl	8001e5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002eec:	e009      	b.n	8002f02 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7fd fbd3 	bl	80006a8 <HAL_I2C_ErrorCallback>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d103      	bne.n	8002f28 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2200      	movs	r2, #0
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d007      	beq.n	8002f46 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699a      	ldr	r2, [r3, #24]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	619a      	str	r2, [r3, #24]
  }
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7ff ff9b 	bl	8002ebc <I2C_TreatErrorCallback>
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	817b      	strh	r3, [r7, #10]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fa2:	897b      	ldrh	r3, [r7, #10]
 8002fa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fa8:	7a7b      	ldrb	r3, [r7, #9]
 8002faa:	041b      	lsls	r3, r3, #16
 8002fac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fb0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	0d5b      	lsrs	r3, r3, #21
 8002fca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fce:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <I2C_TransferConfig+0x60>)
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	ea02 0103 	and.w	r1, r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	03ff63ff 	.word	0x03ff63ff

08002ff4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003008:	4a39      	ldr	r2, [pc, #228]	; (80030f0 <I2C_Enable_IRQ+0xfc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d032      	beq.n	8003074 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003012:	4a38      	ldr	r2, [pc, #224]	; (80030f4 <I2C_Enable_IRQ+0x100>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d02d      	beq.n	8003074 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800301c:	4a36      	ldr	r2, [pc, #216]	; (80030f8 <I2C_Enable_IRQ+0x104>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d028      	beq.n	8003074 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003022:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003026:	2b00      	cmp	r3, #0
 8003028:	da03      	bge.n	8003032 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003030:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003042:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003054:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003056:	887b      	ldrh	r3, [r7, #2]
 8003058:	2b10      	cmp	r3, #16
 800305a:	d103      	bne.n	8003064 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003062:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003064:	887b      	ldrh	r3, [r7, #2]
 8003066:	2b20      	cmp	r3, #32
 8003068:	d133      	bne.n	80030d2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f043 0320 	orr.w	r3, r3, #32
 8003070:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003072:	e02e      	b.n	80030d2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003074:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003078:	2b00      	cmp	r3, #0
 800307a:	da03      	bge.n	8003084 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003082:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003094:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80030a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d103      	bne.n	80030b6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80030b4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d103      	bne.n	80030c4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030c2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	2b40      	cmp	r3, #64	; 0x40
 80030c8:	d103      	bne.n	80030d2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6819      	ldr	r1, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	08002077 	.word	0x08002077
 80030f4:	08002499 	.word	0x08002499
 80030f8:	0800224d 	.word	0x0800224d

080030fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00f      	beq.n	8003136 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800311c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800312a:	2b28      	cmp	r3, #40	; 0x28
 800312c:	d003      	beq.n	8003136 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003134:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003136:	887b      	ldrh	r3, [r7, #2]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00f      	beq.n	8003160 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003146:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003154:	2b28      	cmp	r3, #40	; 0x28
 8003156:	d003      	beq.n	8003160 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800315e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003160:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003164:	2b00      	cmp	r3, #0
 8003166:	da03      	bge.n	8003170 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800316e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003170:	887b      	ldrh	r3, [r7, #2]
 8003172:	2b10      	cmp	r3, #16
 8003174:	d103      	bne.n	800317e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800317c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	2b20      	cmp	r3, #32
 8003182:	d103      	bne.n	800318c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f043 0320 	orr.w	r3, r3, #32
 800318a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d103      	bne.n	800319a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003198:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	43da      	mvns	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	400a      	ands	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d138      	bne.n	8003240 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031d8:	2302      	movs	r3, #2
 80031da:	e032      	b.n	8003242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	; 0x24
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800320a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6819      	ldr	r1, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e000      	b.n	8003242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003240:	2302      	movs	r3, #2
  }
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b20      	cmp	r3, #32
 8003262:	d139      	bne.n	80032d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800326e:	2302      	movs	r3, #2
 8003270:	e033      	b.n	80032da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2224      	movs	r2, #36	; 0x24
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e000      	b.n	80032da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a04      	ldr	r2, [pc, #16]	; (8003304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f6:	6013      	str	r3, [r2, #0]
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40007000 	.word	0x40007000

08003308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <HAL_PWREx_GetVoltageRange+0x18>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40007000 	.word	0x40007000

08003324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003332:	d130      	bne.n	8003396 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003334:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800333c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003340:	d038      	beq.n	80033b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800334a:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003352:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2232      	movs	r2, #50	; 0x32
 8003358:	fb02 f303 	mul.w	r3, r2, r3
 800335c:	4a1b      	ldr	r2, [pc, #108]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	0c9b      	lsrs	r3, r3, #18
 8003364:	3301      	adds	r3, #1
 8003366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003368:	e002      	b.n	8003370 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3b01      	subs	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337c:	d102      	bne.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x60>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f2      	bne.n	800336a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003390:	d110      	bne.n	80033b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e00f      	b.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a2:	d007      	beq.n	80033b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033a4:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033ac:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40007000 	.word	0x40007000
 80033c8:	20000000 	.word	0x20000000
 80033cc:	431bde83 	.word	0x431bde83

080033d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f000 bc02 	b.w	8003be8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e4:	4b96      	ldr	r3, [pc, #600]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ee:	4b94      	ldr	r3, [pc, #592]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80e4 	beq.w	80035ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <HAL_RCC_OscConfig+0x4c>
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	f040 808b 	bne.w	800352a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b01      	cmp	r3, #1
 8003418:	f040 8087 	bne.w	800352a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800341c:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_OscConfig+0x64>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e3d9      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1a      	ldr	r2, [r3, #32]
 8003438:	4b81      	ldr	r3, [pc, #516]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <HAL_RCC_OscConfig+0x7e>
 8003444:	4b7e      	ldr	r3, [pc, #504]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344c:	e005      	b.n	800345a <HAL_RCC_OscConfig+0x8a>
 800344e:	4b7c      	ldr	r3, [pc, #496]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345a:	4293      	cmp	r3, r2
 800345c:	d223      	bcs.n	80034a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fd8c 	bl	8003f80 <RCC_SetFlashLatencyFromMSIRange>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e3ba      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003472:	4b73      	ldr	r3, [pc, #460]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a72      	ldr	r2, [pc, #456]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003478:	f043 0308 	orr.w	r3, r3, #8
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b70      	ldr	r3, [pc, #448]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	496d      	ldr	r1, [pc, #436]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 800348c:	4313      	orrs	r3, r2
 800348e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003490:	4b6b      	ldr	r3, [pc, #428]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	4968      	ldr	r1, [pc, #416]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
 80034a4:	e025      	b.n	80034f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034a6:	4b66      	ldr	r3, [pc, #408]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a65      	ldr	r2, [pc, #404]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 80034ac:	f043 0308 	orr.w	r3, r3, #8
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b63      	ldr	r3, [pc, #396]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4960      	ldr	r1, [pc, #384]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034c4:	4b5e      	ldr	r3, [pc, #376]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	495b      	ldr	r1, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fd4c 	bl	8003f80 <RCC_SetFlashLatencyFromMSIRange>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e37a      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034f2:	f000 fc81 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b51      	ldr	r3, [pc, #324]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	4950      	ldr	r1, [pc, #320]	; (8003644 <HAL_RCC_OscConfig+0x274>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	4a4e      	ldr	r2, [pc, #312]	; (8003648 <HAL_RCC_OscConfig+0x278>)
 8003510:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003512:	4b4e      	ldr	r3, [pc, #312]	; (800364c <HAL_RCC_OscConfig+0x27c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fd56 	bl	8000fc8 <HAL_InitTick>
 800351c:	4603      	mov	r3, r0
 800351e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d052      	beq.n	80035cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	e35e      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d032      	beq.n	8003598 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003532:	4b43      	ldr	r3, [pc, #268]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a42      	ldr	r2, [pc, #264]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800353e:	f7fd fd93 	bl	8001068 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003546:	f7fd fd8f 	bl	8001068 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e347      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003558:	4b39      	ldr	r3, [pc, #228]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003564:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a35      	ldr	r2, [pc, #212]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 800356a:	f043 0308 	orr.w	r3, r3, #8
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	4b33      	ldr	r3, [pc, #204]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4930      	ldr	r1, [pc, #192]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003582:	4b2f      	ldr	r3, [pc, #188]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	492b      	ldr	r1, [pc, #172]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
 8003596:	e01a      	b.n	80035ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003598:	4b29      	ldr	r3, [pc, #164]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a28      	ldr	r2, [pc, #160]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035a4:	f7fd fd60 	bl	8001068 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ac:	f7fd fd5c 	bl	8001068 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e314      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035be:	4b20      	ldr	r3, [pc, #128]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x1dc>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d073      	beq.n	80036c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d005      	beq.n	80035ec <HAL_RCC_OscConfig+0x21c>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d10e      	bne.n	8003604 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d10b      	bne.n	8003604 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d063      	beq.n	80036c0 <HAL_RCC_OscConfig+0x2f0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d15f      	bne.n	80036c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e2f1      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d106      	bne.n	800361c <HAL_RCC_OscConfig+0x24c>
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a0b      	ldr	r2, [pc, #44]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e025      	b.n	8003668 <HAL_RCC_OscConfig+0x298>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003624:	d114      	bne.n	8003650 <HAL_RCC_OscConfig+0x280>
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a05      	ldr	r2, [pc, #20]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b03      	ldr	r3, [pc, #12]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a02      	ldr	r2, [pc, #8]	; (8003640 <HAL_RCC_OscConfig+0x270>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e013      	b.n	8003668 <HAL_RCC_OscConfig+0x298>
 8003640:	40021000 	.word	0x40021000
 8003644:	08005fa8 	.word	0x08005fa8
 8003648:	20000000 	.word	0x20000000
 800364c:	20000004 	.word	0x20000004
 8003650:	4ba0      	ldr	r3, [pc, #640]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a9f      	ldr	r2, [pc, #636]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 8003656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4b9d      	ldr	r3, [pc, #628]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a9c      	ldr	r2, [pc, #624]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 8003662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d013      	beq.n	8003698 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fd fcfa 	bl	8001068 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003678:	f7fd fcf6 	bl	8001068 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e2ae      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800368a:	4b92      	ldr	r3, [pc, #584]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x2a8>
 8003696:	e014      	b.n	80036c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fd fce6 	bl	8001068 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fd fce2 	bl	8001068 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e29a      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036b2:	4b88      	ldr	r3, [pc, #544]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x2d0>
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d060      	beq.n	8003790 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_OscConfig+0x310>
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d119      	bne.n	800370e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d116      	bne.n	800370e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e0:	4b7c      	ldr	r3, [pc, #496]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_OscConfig+0x328>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e277      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b76      	ldr	r3, [pc, #472]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	061b      	lsls	r3, r3, #24
 8003706:	4973      	ldr	r1, [pc, #460]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800370c:	e040      	b.n	8003790 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d023      	beq.n	800375e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003716:	4b6f      	ldr	r3, [pc, #444]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a6e      	ldr	r2, [pc, #440]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fd fca1 	bl	8001068 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372a:	f7fd fc9d 	bl	8001068 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e255      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800373c:	4b65      	ldr	r3, [pc, #404]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003748:	4b62      	ldr	r3, [pc, #392]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	495f      	ldr	r1, [pc, #380]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
 800375c:	e018      	b.n	8003790 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375e:	4b5d      	ldr	r3, [pc, #372]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a5c      	ldr	r2, [pc, #368]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 8003764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fd fc7d 	bl	8001068 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003772:	f7fd fc79 	bl	8001068 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e231      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f0      	bne.n	8003772 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d03c      	beq.n	8003816 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01c      	beq.n	80037de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a4:	4b4b      	ldr	r3, [pc, #300]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 80037a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037aa:	4a4a      	ldr	r2, [pc, #296]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7fd fc58 	bl	8001068 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037bc:	f7fd fc54 	bl	8001068 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e20c      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 80037d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ef      	beq.n	80037bc <HAL_RCC_OscConfig+0x3ec>
 80037dc:	e01b      	b.n	8003816 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037de:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 80037e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e4:	4a3b      	ldr	r2, [pc, #236]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ee:	f7fd fc3b 	bl	8001068 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f6:	f7fd fc37 	bl	8001068 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e1ef      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003808:	4b32      	ldr	r3, [pc, #200]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 800380a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1ef      	bne.n	80037f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80a6 	beq.w	8003970 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003824:	2300      	movs	r3, #0
 8003826:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003828:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10d      	bne.n	8003850 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	4a26      	ldr	r2, [pc, #152]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 800383a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383e:	6593      	str	r3, [r2, #88]	; 0x58
 8003840:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384c:	2301      	movs	r3, #1
 800384e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003850:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <HAL_RCC_OscConfig+0x508>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d118      	bne.n	800388e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800385c:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <HAL_RCC_OscConfig+0x508>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1d      	ldr	r2, [pc, #116]	; (80038d8 <HAL_RCC_OscConfig+0x508>)
 8003862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003866:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003868:	f7fd fbfe 	bl	8001068 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003870:	f7fd fbfa 	bl	8001068 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e1b2      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <HAL_RCC_OscConfig+0x508>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d108      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4d8>
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a6:	e029      	b.n	80038fc <HAL_RCC_OscConfig+0x52c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	d115      	bne.n	80038dc <HAL_RCC_OscConfig+0x50c>
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 80038b8:	f043 0304 	orr.w	r3, r3, #4
 80038bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	4a03      	ldr	r2, [pc, #12]	; (80038d4 <HAL_RCC_OscConfig+0x504>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d0:	e014      	b.n	80038fc <HAL_RCC_OscConfig+0x52c>
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40007000 	.word	0x40007000
 80038dc:	4b9a      	ldr	r3, [pc, #616]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	4a99      	ldr	r2, [pc, #612]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ec:	4b96      	ldr	r3, [pc, #600]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	4a95      	ldr	r2, [pc, #596]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 80038f4:	f023 0304 	bic.w	r3, r3, #4
 80038f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d016      	beq.n	8003932 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fd fbb0 	bl	8001068 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390a:	e00a      	b.n	8003922 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390c:	f7fd fbac 	bl	8001068 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e162      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003922:	4b89      	ldr	r3, [pc, #548]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ed      	beq.n	800390c <HAL_RCC_OscConfig+0x53c>
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fd fb99 	bl	8001068 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003938:	e00a      	b.n	8003950 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fd fb95 	bl	8001068 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	; 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e14b      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003950:	4b7d      	ldr	r3, [pc, #500]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1ed      	bne.n	800393a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800395e:	7ffb      	ldrb	r3, [r7, #31]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003964:	4b78      	ldr	r3, [pc, #480]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	4a77      	ldr	r2, [pc, #476]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 800396a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d03c      	beq.n	80039f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01c      	beq.n	80039be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003984:	4b70      	ldr	r3, [pc, #448]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800398a:	4a6f      	ldr	r2, [pc, #444]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7fd fb68 	bl	8001068 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800399c:	f7fd fb64 	bl	8001068 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e11c      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039ae:	4b66      	ldr	r3, [pc, #408]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 80039b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0ef      	beq.n	800399c <HAL_RCC_OscConfig+0x5cc>
 80039bc:	e01b      	b.n	80039f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039be:	4b62      	ldr	r3, [pc, #392]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 80039c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039c4:	4a60      	ldr	r2, [pc, #384]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ce:	f7fd fb4b 	bl	8001068 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039d6:	f7fd fb47 	bl	8001068 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0ff      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039e8:	4b57      	ldr	r3, [pc, #348]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 80039ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ef      	bne.n	80039d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80f3 	beq.w	8003be6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	f040 80c9 	bne.w	8003b9c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a0a:	4b4f      	ldr	r3, [pc, #316]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f003 0203 	and.w	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d12c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d123      	bne.n	8003a78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d11b      	bne.n	8003a78 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d113      	bne.n	8003a78 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d109      	bne.n	8003a78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	085b      	lsrs	r3, r3, #1
 8003a70:	3b01      	subs	r3, #1
 8003a72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d06b      	beq.n	8003b50 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d062      	beq.n	8003b44 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a7e:	4b32      	ldr	r3, [pc, #200]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e0ac      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2d      	ldr	r2, [pc, #180]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a9a:	f7fd fae5 	bl	8001068 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa2:	f7fd fae1 	bl	8001068 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e099      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab4:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac0:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <HAL_RCC_OscConfig+0x77c>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	0112      	lsls	r2, r2, #4
 8003ad4:	4311      	orrs	r1, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ada:	0212      	lsls	r2, r2, #8
 8003adc:	4311      	orrs	r1, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ae2:	0852      	lsrs	r2, r2, #1
 8003ae4:	3a01      	subs	r2, #1
 8003ae6:	0552      	lsls	r2, r2, #21
 8003ae8:	4311      	orrs	r1, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003aee:	0852      	lsrs	r2, r2, #1
 8003af0:	3a01      	subs	r2, #1
 8003af2:	0652      	lsls	r2, r2, #25
 8003af4:	4311      	orrs	r1, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003afa:	06d2      	lsls	r2, r2, #27
 8003afc:	430a      	orrs	r2, r1
 8003afe:	4912      	ldr	r1, [pc, #72]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b04:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a0f      	ldr	r2, [pc, #60]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b10:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b1c:	f7fd faa4 	bl	8001068 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fd faa0 	bl	8001068 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e058      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b36:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <HAL_RCC_OscConfig+0x778>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b42:	e050      	b.n	8003be6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e04f      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b50:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <HAL_RCC_OscConfig+0x820>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d144      	bne.n	8003be6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCC_OscConfig+0x820>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a23      	ldr	r2, [pc, #140]	; (8003bf0 <HAL_RCC_OscConfig+0x820>)
 8003b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b68:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <HAL_RCC_OscConfig+0x820>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4a20      	ldr	r2, [pc, #128]	; (8003bf0 <HAL_RCC_OscConfig+0x820>)
 8003b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b74:	f7fd fa78 	bl	8001068 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fd fa74 	bl	8001068 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e02c      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8e:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <HAL_RCC_OscConfig+0x820>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x7ac>
 8003b9a:	e024      	b.n	8003be6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b0c      	cmp	r3, #12
 8003ba0:	d01f      	beq.n	8003be2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <HAL_RCC_OscConfig+0x820>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <HAL_RCC_OscConfig+0x820>)
 8003ba8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fd fa5b 	bl	8001068 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb6:	f7fd fa57 	bl	8001068 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e00f      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc8:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_RCC_OscConfig+0x820>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f0      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCC_OscConfig+0x820>)
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	4905      	ldr	r1, [pc, #20]	; (8003bf0 <HAL_RCC_OscConfig+0x820>)
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_RCC_OscConfig+0x824>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60cb      	str	r3, [r1, #12]
 8003be0:	e001      	b.n	8003be6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	feeefffc 	.word	0xfeeefffc

08003bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0e7      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b75      	ldr	r3, [pc, #468]	; (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d910      	bls.n	8003c3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b72      	ldr	r3, [pc, #456]	; (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 0207 	bic.w	r2, r3, #7
 8003c22:	4970      	ldr	r1, [pc, #448]	; (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b6e      	ldr	r3, [pc, #440]	; (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0cf      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d010      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	4b66      	ldr	r3, [pc, #408]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d908      	bls.n	8003c6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c58:	4b63      	ldr	r3, [pc, #396]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4960      	ldr	r1, [pc, #384]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d04c      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d107      	bne.n	8003c8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7e:	4b5a      	ldr	r3, [pc, #360]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d121      	bne.n	8003cce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0a6      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c96:	4b54      	ldr	r3, [pc, #336]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d115      	bne.n	8003cce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e09a      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cae:	4b4e      	ldr	r3, [pc, #312]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e08e      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cbe:	4b4a      	ldr	r3, [pc, #296]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e086      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cce:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f023 0203 	bic.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4943      	ldr	r1, [pc, #268]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce0:	f7fd f9c2 	bl	8001068 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce8:	f7fd f9be 	bl	8001068 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e06e      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	4b3a      	ldr	r3, [pc, #232]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 020c 	and.w	r2, r3, #12
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d1eb      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d010      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d208      	bcs.n	8003d3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d2c:	4b2e      	ldr	r3, [pc, #184]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	492b      	ldr	r1, [pc, #172]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3e:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d210      	bcs.n	8003d6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 0207 	bic.w	r2, r3, #7
 8003d54:	4923      	ldr	r1, [pc, #140]	; (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5c:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d001      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e036      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4918      	ldr	r1, [pc, #96]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d98:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4910      	ldr	r1, [pc, #64]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dac:	f000 f824 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	490b      	ldr	r1, [pc, #44]	; (8003dec <HAL_RCC_ClockConfig+0x1f4>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x1f8>)
 8003dca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dcc:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_ClockConfig+0x1fc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd f8f9 	bl	8000fc8 <HAL_InitTick>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dda:	7afb      	ldrb	r3, [r7, #11]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40022000 	.word	0x40022000
 8003de8:	40021000 	.word	0x40021000
 8003dec:	08005fa8 	.word	0x08005fa8
 8003df0:	20000000 	.word	0x20000000
 8003df4:	20000004 	.word	0x20000004

08003df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b089      	sub	sp, #36	; 0x24
 8003dfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e06:	4b3e      	ldr	r3, [pc, #248]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e10:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x34>
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	d121      	bne.n	8003e6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d11e      	bne.n	8003e6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e2c:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e38:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	e005      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e48:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e54:	4a2b      	ldr	r2, [pc, #172]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10d      	bne.n	8003e80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d102      	bne.n	8003e76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	e004      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e7c:	4b23      	ldr	r3, [pc, #140]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x114>)
 8003e7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	2b0c      	cmp	r3, #12
 8003e84:	d134      	bne.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e86:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d003      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xac>
 8003e9c:	e005      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ea0:	617b      	str	r3, [r7, #20]
      break;
 8003ea2:	e005      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ea6:	617b      	str	r3, [r7, #20]
      break;
 8003ea8:	e002      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	617b      	str	r3, [r7, #20]
      break;
 8003eae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	3301      	adds	r3, #1
 8003ebc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	fb03 f202 	mul.w	r2, r3, r2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	0e5b      	lsrs	r3, r3, #25
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3724      	adds	r7, #36	; 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000
 8003f04:	08005fc0 	.word	0x08005fc0
 8003f08:	00f42400 	.word	0x00f42400
 8003f0c:	007a1200 	.word	0x007a1200

08003f10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f14:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000000 	.word	0x20000000

08003f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f2c:	f7ff fff0 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	4904      	ldr	r1, [pc, #16]	; (8003f50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f3e:	5ccb      	ldrb	r3, [r1, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	08005fb8 	.word	0x08005fb8

08003f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f58:	f7ff ffda 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	0adb      	lsrs	r3, r3, #11
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	4904      	ldr	r1, [pc, #16]	; (8003f7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f6a:	5ccb      	ldrb	r3, [r1, r3]
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	08005fb8 	.word	0x08005fb8

08003f80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f98:	f7ff f9b6 	bl	8003308 <HAL_PWREx_GetVoltageRange>
 8003f9c:	6178      	str	r0, [r7, #20]
 8003f9e:	e014      	b.n	8003fca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	4b25      	ldr	r3, [pc, #148]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	4a24      	ldr	r2, [pc, #144]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003faa:	6593      	str	r3, [r2, #88]	; 0x58
 8003fac:	4b22      	ldr	r3, [pc, #136]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fb8:	f7ff f9a6 	bl	8003308 <HAL_PWREx_GetVoltageRange>
 8003fbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fbe:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd0:	d10b      	bne.n	8003fea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d919      	bls.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2ba0      	cmp	r3, #160	; 0xa0
 8003fdc:	d902      	bls.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fde:	2302      	movs	r3, #2
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e013      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	e010      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d902      	bls.n	8003ff6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e00a      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d102      	bne.n	8004002 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e004      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b70      	cmp	r3, #112	; 0x70
 8004006:	d101      	bne.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004008:	2301      	movs	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 0207 	bic.w	r2, r3, #7
 8004014:	4909      	ldr	r1, [pc, #36]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800401c:	4b07      	ldr	r3, [pc, #28]	; (800403c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	429a      	cmp	r2, r3
 8004028:	d001      	beq.n	800402e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	40022000 	.word	0x40022000

08004040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004048:	2300      	movs	r3, #0
 800404a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800404c:	2300      	movs	r3, #0
 800404e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004058:	2b00      	cmp	r3, #0
 800405a:	d031      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004064:	d01a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004066:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800406a:	d814      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d009      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004074:	d10f      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004076:	4b5d      	ldr	r3, [pc, #372]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	4a5c      	ldr	r2, [pc, #368]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004082:	e00c      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f9de 	bl	800444c <RCCEx_PLLSAI1_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004094:	e003      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	74fb      	strb	r3, [r7, #19]
      break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800409c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040a4:	4b51      	ldr	r3, [pc, #324]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	494e      	ldr	r1, [pc, #312]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040ba:	e001      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 809e 	beq.w	800420a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ce:	2300      	movs	r3, #0
 80040d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040d2:	4b46      	ldr	r3, [pc, #280]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80040e2:	2300      	movs	r3, #0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e8:	4b40      	ldr	r3, [pc, #256]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	4a3f      	ldr	r2, [pc, #252]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f2:	6593      	str	r3, [r2, #88]	; 0x58
 80040f4:	4b3d      	ldr	r3, [pc, #244]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004100:	2301      	movs	r3, #1
 8004102:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004104:	4b3a      	ldr	r3, [pc, #232]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a39      	ldr	r2, [pc, #228]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800410a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004110:	f7fc ffaa 	bl	8001068 <HAL_GetTick>
 8004114:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004116:	e009      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004118:	f7fc ffa6 	bl	8001068 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d902      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	74fb      	strb	r3, [r7, #19]
        break;
 800412a:	e005      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800412c:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ef      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d15a      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800413e:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004148:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01e      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	429a      	cmp	r2, r3
 8004158:	d019      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004164:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004166:	4b21      	ldr	r3, [pc, #132]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800416e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004176:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800417e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004186:	4a19      	ldr	r2, [pc, #100]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d016      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fc ff66 	bl	8001068 <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419e:	e00b      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a0:	f7fc ff62 	bl	8001068 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d902      	bls.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	74fb      	strb	r3, [r7, #19]
            break;
 80041b6:	e006      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0ec      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041da:	4904      	ldr	r1, [pc, #16]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041e2:	e009      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	74bb      	strb	r3, [r7, #18]
 80041e8:	e006      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f4:	7cfb      	ldrb	r3, [r7, #19]
 80041f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f8:	7c7b      	ldrb	r3, [r7, #17]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d105      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fe:	4b8a      	ldr	r3, [pc, #552]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	4a89      	ldr	r2, [pc, #548]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004208:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004216:	4b84      	ldr	r3, [pc, #528]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f023 0203 	bic.w	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	4980      	ldr	r1, [pc, #512]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004238:	4b7b      	ldr	r3, [pc, #492]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 020c 	bic.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	4978      	ldr	r1, [pc, #480]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800425a:	4b73      	ldr	r3, [pc, #460]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	496f      	ldr	r1, [pc, #444]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800427c:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	4967      	ldr	r1, [pc, #412]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800429e:	4b62      	ldr	r3, [pc, #392]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	495e      	ldr	r1, [pc, #376]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	4956      	ldr	r1, [pc, #344]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042e2:	4b51      	ldr	r3, [pc, #324]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	494d      	ldr	r1, [pc, #308]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d028      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004304:	4b48      	ldr	r3, [pc, #288]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	4945      	ldr	r1, [pc, #276]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004322:	d106      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004324:	4b40      	ldr	r3, [pc, #256]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a3f      	ldr	r2, [pc, #252]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800432a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800432e:	60d3      	str	r3, [r2, #12]
 8004330:	e011      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800433a:	d10c      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	2101      	movs	r1, #1
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f882 	bl	800444c <RCCEx_PLLSAI1_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800434c:	7cfb      	ldrb	r3, [r7, #19]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d028      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004370:	492d      	ldr	r1, [pc, #180]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004380:	d106      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004382:	4b29      	ldr	r3, [pc, #164]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4a28      	ldr	r2, [pc, #160]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438c:	60d3      	str	r3, [r2, #12]
 800438e:	e011      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004394:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004398:	d10c      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	2101      	movs	r1, #1
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f853 	bl	800444c <RCCEx_PLLSAI1_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01c      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ce:	4916      	ldr	r1, [pc, #88]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043de:	d10c      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	2102      	movs	r1, #2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f830 	bl	800444c <RCCEx_PLLSAI1_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004414:	4904      	ldr	r1, [pc, #16]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800441c:	7cbb      	ldrb	r3, [r7, #18]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000

0800442c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a04      	ldr	r2, [pc, #16]	; (8004448 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004436:	f043 0304 	orr.w	r3, r3, #4
 800443a:	6013      	str	r3, [r2, #0]
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40021000 	.word	0x40021000

0800444c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800445a:	4b74      	ldr	r3, [pc, #464]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d018      	beq.n	8004498 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004466:	4b71      	ldr	r3, [pc, #452]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0203 	and.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d10d      	bne.n	8004492 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
       ||
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800447e:	4b6b      	ldr	r3, [pc, #428]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
       ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d047      	beq.n	8004522 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
 8004496:	e044      	b.n	8004522 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d018      	beq.n	80044d2 <RCCEx_PLLSAI1_Config+0x86>
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d825      	bhi.n	80044f0 <RCCEx_PLLSAI1_Config+0xa4>
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d002      	beq.n	80044ae <RCCEx_PLLSAI1_Config+0x62>
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d009      	beq.n	80044c0 <RCCEx_PLLSAI1_Config+0x74>
 80044ac:	e020      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ae:	4b5f      	ldr	r3, [pc, #380]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11d      	bne.n	80044f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044be:	e01a      	b.n	80044f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044c0:	4b5a      	ldr	r3, [pc, #360]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d116      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d0:	e013      	b.n	80044fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044d2:	4b56      	ldr	r3, [pc, #344]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044de:	4b53      	ldr	r3, [pc, #332]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ee:	e006      	b.n	80044fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      break;
 80044f4:	e004      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044f6:	bf00      	nop
 80044f8:	e002      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10d      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004506:	4b49      	ldr	r3, [pc, #292]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	3b01      	subs	r3, #1
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	430b      	orrs	r3, r1
 800451c:	4943      	ldr	r1, [pc, #268]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d17c      	bne.n	8004622 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004528:	4b40      	ldr	r3, [pc, #256]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a3f      	ldr	r2, [pc, #252]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 800452e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fc fd98 	bl	8001068 <HAL_GetTick>
 8004538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800453a:	e009      	b.n	8004550 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800453c:	f7fc fd94 	bl	8001068 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d902      	bls.n	8004550 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	73fb      	strb	r3, [r7, #15]
        break;
 800454e:	e005      	b.n	800455c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004550:	4b36      	ldr	r3, [pc, #216]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ef      	bne.n	800453c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d15f      	bne.n	8004622 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d110      	bne.n	800458a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004568:	4b30      	ldr	r3, [pc, #192]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004570:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	0211      	lsls	r1, r2, #8
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68d2      	ldr	r2, [r2, #12]
 800457e:	06d2      	lsls	r2, r2, #27
 8004580:	430a      	orrs	r2, r1
 8004582:	492a      	ldr	r1, [pc, #168]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	610b      	str	r3, [r1, #16]
 8004588:	e027      	b.n	80045da <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d112      	bne.n	80045b6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004590:	4b26      	ldr	r3, [pc, #152]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004598:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6892      	ldr	r2, [r2, #8]
 80045a0:	0211      	lsls	r1, r2, #8
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6912      	ldr	r2, [r2, #16]
 80045a6:	0852      	lsrs	r2, r2, #1
 80045a8:	3a01      	subs	r2, #1
 80045aa:	0552      	lsls	r2, r2, #21
 80045ac:	430a      	orrs	r2, r1
 80045ae:	491f      	ldr	r1, [pc, #124]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	610b      	str	r3, [r1, #16]
 80045b4:	e011      	b.n	80045da <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045b6:	4b1d      	ldr	r3, [pc, #116]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6892      	ldr	r2, [r2, #8]
 80045c6:	0211      	lsls	r1, r2, #8
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6952      	ldr	r2, [r2, #20]
 80045cc:	0852      	lsrs	r2, r2, #1
 80045ce:	3a01      	subs	r2, #1
 80045d0:	0652      	lsls	r2, r2, #25
 80045d2:	430a      	orrs	r2, r1
 80045d4:	4915      	ldr	r1, [pc, #84]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a13      	ldr	r2, [pc, #76]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e6:	f7fc fd3f 	bl	8001068 <HAL_GetTick>
 80045ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ec:	e009      	b.n	8004602 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045ee:	f7fc fd3b 	bl	8001068 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d902      	bls.n	8004602 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	73fb      	strb	r3, [r7, #15]
          break;
 8004600:	e005      	b.n	800460e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0ef      	beq.n	80045ee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	4903      	ldr	r1, [pc, #12]	; (800462c <RCCEx_PLLSAI1_Config+0x1e0>)
 800461e:	4313      	orrs	r3, r2
 8004620:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40021000 	.word	0x40021000

08004630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e049      	b.n	80046d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc fb62 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f000 fb52 	bl	8004d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e049      	b.n	8004784 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d106      	bne.n	800470a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f841 	bl	800478c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3304      	adds	r3, #4
 800471a:	4619      	mov	r1, r3
 800471c:	4610      	mov	r0, r2
 800471e:	f000 fafb 	bl	8004d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_TIM_PWM_Start+0x24>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	bf14      	ite	ne
 80047bc:	2301      	movne	r3, #1
 80047be:	2300      	moveq	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e03c      	b.n	800483e <HAL_TIM_PWM_Start+0x9e>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d109      	bne.n	80047de <HAL_TIM_PWM_Start+0x3e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	bf14      	ite	ne
 80047d6:	2301      	movne	r3, #1
 80047d8:	2300      	moveq	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	e02f      	b.n	800483e <HAL_TIM_PWM_Start+0x9e>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d109      	bne.n	80047f8 <HAL_TIM_PWM_Start+0x58>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	e022      	b.n	800483e <HAL_TIM_PWM_Start+0x9e>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d109      	bne.n	8004812 <HAL_TIM_PWM_Start+0x72>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b01      	cmp	r3, #1
 8004808:	bf14      	ite	ne
 800480a:	2301      	movne	r3, #1
 800480c:	2300      	moveq	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	e015      	b.n	800483e <HAL_TIM_PWM_Start+0x9e>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b10      	cmp	r3, #16
 8004816:	d109      	bne.n	800482c <HAL_TIM_PWM_Start+0x8c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e008      	b.n	800483e <HAL_TIM_PWM_Start+0x9e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	bf14      	ite	ne
 8004838:	2301      	movne	r3, #1
 800483a:	2300      	moveq	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07e      	b.n	8004944 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Start+0xb6>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004854:	e023      	b.n	800489e <HAL_TIM_PWM_Start+0xfe>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b04      	cmp	r3, #4
 800485a:	d104      	bne.n	8004866 <HAL_TIM_PWM_Start+0xc6>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004864:	e01b      	b.n	800489e <HAL_TIM_PWM_Start+0xfe>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d104      	bne.n	8004876 <HAL_TIM_PWM_Start+0xd6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004874:	e013      	b.n	800489e <HAL_TIM_PWM_Start+0xfe>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b0c      	cmp	r3, #12
 800487a:	d104      	bne.n	8004886 <HAL_TIM_PWM_Start+0xe6>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004884:	e00b      	b.n	800489e <HAL_TIM_PWM_Start+0xfe>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b10      	cmp	r3, #16
 800488a:	d104      	bne.n	8004896 <HAL_TIM_PWM_Start+0xf6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004894:	e003      	b.n	800489e <HAL_TIM_PWM_Start+0xfe>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2201      	movs	r2, #1
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fdb2 	bl	8005410 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a26      	ldr	r2, [pc, #152]	; (800494c <HAL_TIM_PWM_Start+0x1ac>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_TIM_PWM_Start+0x12a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a25      	ldr	r2, [pc, #148]	; (8004950 <HAL_TIM_PWM_Start+0x1b0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_TIM_PWM_Start+0x12a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a23      	ldr	r2, [pc, #140]	; (8004954 <HAL_TIM_PWM_Start+0x1b4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d101      	bne.n	80048ce <HAL_TIM_PWM_Start+0x12e>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_TIM_PWM_Start+0x130>
 80048ce:	2300      	movs	r3, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <HAL_TIM_PWM_Start+0x1ac>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d009      	beq.n	8004902 <HAL_TIM_PWM_Start+0x162>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f6:	d004      	beq.n	8004902 <HAL_TIM_PWM_Start+0x162>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <HAL_TIM_PWM_Start+0x1b0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d115      	bne.n	800492e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <HAL_TIM_PWM_Start+0x1b8>)
 800490a:	4013      	ands	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b06      	cmp	r3, #6
 8004912:	d015      	beq.n	8004940 <HAL_TIM_PWM_Start+0x1a0>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491a:	d011      	beq.n	8004940 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492c:	e008      	b.n	8004940 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e000      	b.n	8004942 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004940:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40014000 	.word	0x40014000
 8004954:	40014400 	.word	0x40014400
 8004958:	00010007 	.word	0x00010007

0800495c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004976:	2302      	movs	r3, #2
 8004978:	e0ff      	b.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b14      	cmp	r3, #20
 8004986:	f200 80f0 	bhi.w	8004b6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800498a:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004990:	080049e5 	.word	0x080049e5
 8004994:	08004b6b 	.word	0x08004b6b
 8004998:	08004b6b 	.word	0x08004b6b
 800499c:	08004b6b 	.word	0x08004b6b
 80049a0:	08004a25 	.word	0x08004a25
 80049a4:	08004b6b 	.word	0x08004b6b
 80049a8:	08004b6b 	.word	0x08004b6b
 80049ac:	08004b6b 	.word	0x08004b6b
 80049b0:	08004a67 	.word	0x08004a67
 80049b4:	08004b6b 	.word	0x08004b6b
 80049b8:	08004b6b 	.word	0x08004b6b
 80049bc:	08004b6b 	.word	0x08004b6b
 80049c0:	08004aa7 	.word	0x08004aa7
 80049c4:	08004b6b 	.word	0x08004b6b
 80049c8:	08004b6b 	.word	0x08004b6b
 80049cc:	08004b6b 	.word	0x08004b6b
 80049d0:	08004ae9 	.word	0x08004ae9
 80049d4:	08004b6b 	.word	0x08004b6b
 80049d8:	08004b6b 	.word	0x08004b6b
 80049dc:	08004b6b 	.word	0x08004b6b
 80049e0:	08004b29 	.word	0x08004b29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 f9f8 	bl	8004de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0208 	orr.w	r2, r2, #8
 80049fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0204 	bic.w	r2, r2, #4
 8004a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6999      	ldr	r1, [r3, #24]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	619a      	str	r2, [r3, #24]
      break;
 8004a22:	e0a5      	b.n	8004b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fa54 	bl	8004ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6999      	ldr	r1, [r3, #24]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	021a      	lsls	r2, r3, #8
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	619a      	str	r2, [r3, #24]
      break;
 8004a64:	e084      	b.n	8004b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 faad 	bl	8004fcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0208 	orr.w	r2, r2, #8
 8004a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0204 	bic.w	r2, r2, #4
 8004a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69d9      	ldr	r1, [r3, #28]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	61da      	str	r2, [r3, #28]
      break;
 8004aa4:	e064      	b.n	8004b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fb05 	bl	80050bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69d9      	ldr	r1, [r3, #28]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	021a      	lsls	r2, r3, #8
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	61da      	str	r2, [r3, #28]
      break;
 8004ae6:	e043      	b.n	8004b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fb42 	bl	8005178 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0204 	bic.w	r2, r2, #4
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b26:	e023      	b.n	8004b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fb7a 	bl	8005228 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	021a      	lsls	r2, r3, #8
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b68:	e002      	b.n	8004b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop

08004b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIM_ConfigClockSource+0x1c>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e0b6      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x18a>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bdc:	d03e      	beq.n	8004c5c <HAL_TIM_ConfigClockSource+0xd8>
 8004bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be2:	f200 8087 	bhi.w	8004cf4 <HAL_TIM_ConfigClockSource+0x170>
 8004be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bea:	f000 8086 	beq.w	8004cfa <HAL_TIM_ConfigClockSource+0x176>
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf2:	d87f      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x170>
 8004bf4:	2b70      	cmp	r3, #112	; 0x70
 8004bf6:	d01a      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0xaa>
 8004bf8:	2b70      	cmp	r3, #112	; 0x70
 8004bfa:	d87b      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x170>
 8004bfc:	2b60      	cmp	r3, #96	; 0x60
 8004bfe:	d050      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x11e>
 8004c00:	2b60      	cmp	r3, #96	; 0x60
 8004c02:	d877      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x170>
 8004c04:	2b50      	cmp	r3, #80	; 0x50
 8004c06:	d03c      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0xfe>
 8004c08:	2b50      	cmp	r3, #80	; 0x50
 8004c0a:	d873      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x170>
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d058      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x13e>
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d86f      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x170>
 8004c14:	2b30      	cmp	r3, #48	; 0x30
 8004c16:	d064      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c18:	2b30      	cmp	r3, #48	; 0x30
 8004c1a:	d86b      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x170>
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d060      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d867      	bhi.n	8004cf4 <HAL_TIM_ConfigClockSource+0x170>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d05c      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c28:	2b10      	cmp	r3, #16
 8004c2a:	d05a      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c2c:	e062      	b.n	8004cf4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c3e:	f000 fbc7 	bl	80053d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	609a      	str	r2, [r3, #8]
      break;
 8004c5a:	e04f      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c6c:	f000 fbb0 	bl	80053d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c7e:	609a      	str	r2, [r3, #8]
      break;
 8004c80:	e03c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f000 fb24 	bl	80052dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2150      	movs	r1, #80	; 0x50
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fb7d 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004ca0:	e02c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f000 fb43 	bl	800533a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2160      	movs	r1, #96	; 0x60
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fb6d 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004cc0:	e01c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f000 fb04 	bl	80052dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2140      	movs	r1, #64	; 0x40
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fb5d 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004ce0:	e00c      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4619      	mov	r1, r3
 8004cec:	4610      	mov	r0, r2
 8004cee:	f000 fb54 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004cf2:	e003      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf8:	e000      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a2a      	ldr	r2, [pc, #168]	; (8004dd4 <TIM_Base_SetConfig+0xbc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_Base_SetConfig+0x20>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d108      	bne.n	8004d4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a21      	ldr	r2, [pc, #132]	; (8004dd4 <TIM_Base_SetConfig+0xbc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00b      	beq.n	8004d6a <TIM_Base_SetConfig+0x52>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d58:	d007      	beq.n	8004d6a <TIM_Base_SetConfig+0x52>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <TIM_Base_SetConfig+0xc0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_Base_SetConfig+0x52>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <TIM_Base_SetConfig+0xc4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d108      	bne.n	8004d7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a0c      	ldr	r2, [pc, #48]	; (8004dd4 <TIM_Base_SetConfig+0xbc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d007      	beq.n	8004db8 <TIM_Base_SetConfig+0xa0>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a0b      	ldr	r2, [pc, #44]	; (8004dd8 <TIM_Base_SetConfig+0xc0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d003      	beq.n	8004db8 <TIM_Base_SetConfig+0xa0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <TIM_Base_SetConfig+0xc4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d103      	bne.n	8004dc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	615a      	str	r2, [r3, #20]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40014400 	.word	0x40014400

08004de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f023 0201 	bic.w	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0303 	bic.w	r3, r3, #3
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f023 0302 	bic.w	r3, r3, #2
 8004e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a24      	ldr	r2, [pc, #144]	; (8004ecc <TIM_OC1_SetConfig+0xec>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <TIM_OC1_SetConfig+0x70>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a23      	ldr	r2, [pc, #140]	; (8004ed0 <TIM_OC1_SetConfig+0xf0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_OC1_SetConfig+0x70>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a22      	ldr	r2, [pc, #136]	; (8004ed4 <TIM_OC1_SetConfig+0xf4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10c      	bne.n	8004e6a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0308 	bic.w	r3, r3, #8
 8004e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f023 0304 	bic.w	r3, r3, #4
 8004e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <TIM_OC1_SetConfig+0xec>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <TIM_OC1_SetConfig+0xa2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <TIM_OC1_SetConfig+0xf0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_OC1_SetConfig+0xa2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <TIM_OC1_SetConfig+0xf4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d111      	bne.n	8004ea6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	621a      	str	r2, [r3, #32]
}
 8004ec0:	bf00      	nop
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	40014400 	.word	0x40014400

08004ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f023 0210 	bic.w	r2, r3, #16
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0320 	bic.w	r3, r3, #32
 8004f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a22      	ldr	r2, [pc, #136]	; (8004fc0 <TIM_OC2_SetConfig+0xe8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d10d      	bne.n	8004f58 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <TIM_OC2_SetConfig+0xe8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d007      	beq.n	8004f70 <TIM_OC2_SetConfig+0x98>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a18      	ldr	r2, [pc, #96]	; (8004fc4 <TIM_OC2_SetConfig+0xec>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_OC2_SetConfig+0x98>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <TIM_OC2_SetConfig+0xf0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d113      	bne.n	8004f98 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	621a      	str	r2, [r3, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40012c00 	.word	0x40012c00
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	40014400 	.word	0x40014400

08004fcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0303 	bic.w	r3, r3, #3
 8005006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <TIM_OC3_SetConfig+0xe4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d10d      	bne.n	800504a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005034:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <TIM_OC3_SetConfig+0xe4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <TIM_OC3_SetConfig+0x96>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <TIM_OC3_SetConfig+0xe8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_OC3_SetConfig+0x96>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a16      	ldr	r2, [pc, #88]	; (80050b8 <TIM_OC3_SetConfig+0xec>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d113      	bne.n	800508a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	621a      	str	r2, [r3, #32]
}
 80050a4:	bf00      	nop
 80050a6:	371c      	adds	r7, #28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	40012c00 	.word	0x40012c00
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400

080050bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800510a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	031b      	lsls	r3, r3, #12
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a14      	ldr	r2, [pc, #80]	; (800516c <TIM_OC4_SetConfig+0xb0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_OC4_SetConfig+0x74>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a13      	ldr	r2, [pc, #76]	; (8005170 <TIM_OC4_SetConfig+0xb4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_OC4_SetConfig+0x74>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a12      	ldr	r2, [pc, #72]	; (8005174 <TIM_OC4_SetConfig+0xb8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d109      	bne.n	8005144 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	019b      	lsls	r3, r3, #6
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40012c00 	.word	0x40012c00
 8005170:	40014000 	.word	0x40014000
 8005174:	40014400 	.word	0x40014400

08005178 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	041b      	lsls	r3, r3, #16
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <TIM_OC5_SetConfig+0xa4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d007      	beq.n	80051e2 <TIM_OC5_SetConfig+0x6a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a12      	ldr	r2, [pc, #72]	; (8005220 <TIM_OC5_SetConfig+0xa8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_OC5_SetConfig+0x6a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a11      	ldr	r2, [pc, #68]	; (8005224 <TIM_OC5_SetConfig+0xac>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d109      	bne.n	80051f6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	621a      	str	r2, [r3, #32]
}
 8005210:	bf00      	nop
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400

08005228 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800526e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	051b      	lsls	r3, r3, #20
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a14      	ldr	r2, [pc, #80]	; (80052d0 <TIM_OC6_SetConfig+0xa8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d007      	beq.n	8005294 <TIM_OC6_SetConfig+0x6c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a13      	ldr	r2, [pc, #76]	; (80052d4 <TIM_OC6_SetConfig+0xac>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d003      	beq.n	8005294 <TIM_OC6_SetConfig+0x6c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a12      	ldr	r2, [pc, #72]	; (80052d8 <TIM_OC6_SetConfig+0xb0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d109      	bne.n	80052a8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800529a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	029b      	lsls	r3, r3, #10
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	621a      	str	r2, [r3, #32]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400

080052dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f023 0201 	bic.w	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f023 030a 	bic.w	r3, r3, #10
 8005318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800533a:	b480      	push	{r7}
 800533c:	b087      	sub	sp, #28
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f023 0210 	bic.w	r2, r3, #16
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	031b      	lsls	r3, r3, #12
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005376:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f043 0307 	orr.w	r3, r3, #7
 80053bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	021a      	lsls	r2, r3, #8
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	609a      	str	r2, [r3, #8]
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	2201      	movs	r2, #1
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a1a      	ldr	r2, [r3, #32]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	43db      	mvns	r3, r3
 8005432:	401a      	ands	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	431a      	orrs	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005470:	2302      	movs	r3, #2
 8005472:	e04f      	b.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a21      	ldr	r2, [pc, #132]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d108      	bne.n	80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a14      	ldr	r2, [pc, #80]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d009      	beq.n	80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054dc:	d004      	beq.n	80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a10      	ldr	r2, [pc, #64]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d10c      	bne.n	8005502 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40014000 	.word	0x40014000

08005528 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005540:	2302      	movs	r3, #2
 8005542:	e060      	b.n	8005606 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a14      	ldr	r2, [pc, #80]	; (8005614 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d115      	bne.n	80055f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	051b      	lsls	r3, r3, #20
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40012c00 	.word	0x40012c00

08005618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e040      	b.n	80056ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fb fbc8 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2224      	movs	r2, #36	; 0x24
 8005644:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0201 	bic.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa54 	bl	8005b0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f825 	bl	80056b4 <UART_SetConfig>
 800566a:	4603      	mov	r3, r0
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e01b      	b.n	80056ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0201 	orr.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fad3 	bl	8005c50 <UART_CheckIdleState>
 80056aa:	4603      	mov	r3, r0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b8:	b08a      	sub	sp, #40	; 0x28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	431a      	orrs	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	4313      	orrs	r3, r2
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4bb4      	ldr	r3, [pc, #720]	; (80059b4 <UART_SetConfig+0x300>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056ec:	430b      	orrs	r3, r1
 80056ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4aa9      	ldr	r2, [pc, #676]	; (80059b8 <UART_SetConfig+0x304>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d004      	beq.n	8005720 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571c:	4313      	orrs	r3, r2
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005730:	430a      	orrs	r2, r1
 8005732:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4aa0      	ldr	r2, [pc, #640]	; (80059bc <UART_SetConfig+0x308>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d126      	bne.n	800578c <UART_SetConfig+0xd8>
 800573e:	4ba0      	ldr	r3, [pc, #640]	; (80059c0 <UART_SetConfig+0x30c>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	2b03      	cmp	r3, #3
 800574a:	d81b      	bhi.n	8005784 <UART_SetConfig+0xd0>
 800574c:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <UART_SetConfig+0xa0>)
 800574e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005752:	bf00      	nop
 8005754:	08005765 	.word	0x08005765
 8005758:	08005775 	.word	0x08005775
 800575c:	0800576d 	.word	0x0800576d
 8005760:	0800577d 	.word	0x0800577d
 8005764:	2301      	movs	r3, #1
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800576a:	e080      	b.n	800586e <UART_SetConfig+0x1ba>
 800576c:	2302      	movs	r3, #2
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005772:	e07c      	b.n	800586e <UART_SetConfig+0x1ba>
 8005774:	2304      	movs	r3, #4
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800577a:	e078      	b.n	800586e <UART_SetConfig+0x1ba>
 800577c:	2308      	movs	r3, #8
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005782:	e074      	b.n	800586e <UART_SetConfig+0x1ba>
 8005784:	2310      	movs	r3, #16
 8005786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578a:	e070      	b.n	800586e <UART_SetConfig+0x1ba>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a8c      	ldr	r2, [pc, #560]	; (80059c4 <UART_SetConfig+0x310>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d138      	bne.n	8005808 <UART_SetConfig+0x154>
 8005796:	4b8a      	ldr	r3, [pc, #552]	; (80059c0 <UART_SetConfig+0x30c>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	f003 030c 	and.w	r3, r3, #12
 80057a0:	2b0c      	cmp	r3, #12
 80057a2:	d82d      	bhi.n	8005800 <UART_SetConfig+0x14c>
 80057a4:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <UART_SetConfig+0xf8>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057e1 	.word	0x080057e1
 80057b0:	08005801 	.word	0x08005801
 80057b4:	08005801 	.word	0x08005801
 80057b8:	08005801 	.word	0x08005801
 80057bc:	080057f1 	.word	0x080057f1
 80057c0:	08005801 	.word	0x08005801
 80057c4:	08005801 	.word	0x08005801
 80057c8:	08005801 	.word	0x08005801
 80057cc:	080057e9 	.word	0x080057e9
 80057d0:	08005801 	.word	0x08005801
 80057d4:	08005801 	.word	0x08005801
 80057d8:	08005801 	.word	0x08005801
 80057dc:	080057f9 	.word	0x080057f9
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e6:	e042      	b.n	800586e <UART_SetConfig+0x1ba>
 80057e8:	2302      	movs	r3, #2
 80057ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ee:	e03e      	b.n	800586e <UART_SetConfig+0x1ba>
 80057f0:	2304      	movs	r3, #4
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f6:	e03a      	b.n	800586e <UART_SetConfig+0x1ba>
 80057f8:	2308      	movs	r3, #8
 80057fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fe:	e036      	b.n	800586e <UART_SetConfig+0x1ba>
 8005800:	2310      	movs	r3, #16
 8005802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005806:	e032      	b.n	800586e <UART_SetConfig+0x1ba>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a6a      	ldr	r2, [pc, #424]	; (80059b8 <UART_SetConfig+0x304>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d12a      	bne.n	8005868 <UART_SetConfig+0x1b4>
 8005812:	4b6b      	ldr	r3, [pc, #428]	; (80059c0 <UART_SetConfig+0x30c>)
 8005814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005818:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800581c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005820:	d01a      	beq.n	8005858 <UART_SetConfig+0x1a4>
 8005822:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005826:	d81b      	bhi.n	8005860 <UART_SetConfig+0x1ac>
 8005828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800582c:	d00c      	beq.n	8005848 <UART_SetConfig+0x194>
 800582e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005832:	d815      	bhi.n	8005860 <UART_SetConfig+0x1ac>
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <UART_SetConfig+0x18c>
 8005838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583c:	d008      	beq.n	8005850 <UART_SetConfig+0x19c>
 800583e:	e00f      	b.n	8005860 <UART_SetConfig+0x1ac>
 8005840:	2300      	movs	r3, #0
 8005842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005846:	e012      	b.n	800586e <UART_SetConfig+0x1ba>
 8005848:	2302      	movs	r3, #2
 800584a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584e:	e00e      	b.n	800586e <UART_SetConfig+0x1ba>
 8005850:	2304      	movs	r3, #4
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005856:	e00a      	b.n	800586e <UART_SetConfig+0x1ba>
 8005858:	2308      	movs	r3, #8
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585e:	e006      	b.n	800586e <UART_SetConfig+0x1ba>
 8005860:	2310      	movs	r3, #16
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005866:	e002      	b.n	800586e <UART_SetConfig+0x1ba>
 8005868:	2310      	movs	r3, #16
 800586a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a51      	ldr	r2, [pc, #324]	; (80059b8 <UART_SetConfig+0x304>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d17a      	bne.n	800596e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800587c:	2b08      	cmp	r3, #8
 800587e:	d824      	bhi.n	80058ca <UART_SetConfig+0x216>
 8005880:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <UART_SetConfig+0x1d4>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058ad 	.word	0x080058ad
 800588c:	080058cb 	.word	0x080058cb
 8005890:	080058b5 	.word	0x080058b5
 8005894:	080058cb 	.word	0x080058cb
 8005898:	080058bb 	.word	0x080058bb
 800589c:	080058cb 	.word	0x080058cb
 80058a0:	080058cb 	.word	0x080058cb
 80058a4:	080058cb 	.word	0x080058cb
 80058a8:	080058c3 	.word	0x080058c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ac:	f7fe fb3c 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 80058b0:	61f8      	str	r0, [r7, #28]
        break;
 80058b2:	e010      	b.n	80058d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b4:	4b44      	ldr	r3, [pc, #272]	; (80059c8 <UART_SetConfig+0x314>)
 80058b6:	61fb      	str	r3, [r7, #28]
        break;
 80058b8:	e00d      	b.n	80058d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ba:	f7fe fa9d 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 80058be:	61f8      	str	r0, [r7, #28]
        break;
 80058c0:	e009      	b.n	80058d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c6:	61fb      	str	r3, [r7, #28]
        break;
 80058c8:	e005      	b.n	80058d6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8107 	beq.w	8005aec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4413      	add	r3, r2
 80058e8:	69fa      	ldr	r2, [r7, #28]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d305      	bcc.n	80058fa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d903      	bls.n	8005902 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005900:	e0f4      	b.n	8005aec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	2200      	movs	r2, #0
 8005906:	461c      	mov	r4, r3
 8005908:	4615      	mov	r5, r2
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	022b      	lsls	r3, r5, #8
 8005914:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005918:	0222      	lsls	r2, r4, #8
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	6849      	ldr	r1, [r1, #4]
 800591e:	0849      	lsrs	r1, r1, #1
 8005920:	2000      	movs	r0, #0
 8005922:	4688      	mov	r8, r1
 8005924:	4681      	mov	r9, r0
 8005926:	eb12 0a08 	adds.w	sl, r2, r8
 800592a:	eb43 0b09 	adc.w	fp, r3, r9
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	603b      	str	r3, [r7, #0]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800593c:	4650      	mov	r0, sl
 800593e:	4659      	mov	r1, fp
 8005940:	f7fa fc44 	bl	80001cc <__aeabi_uldivmod>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4613      	mov	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005952:	d308      	bcc.n	8005966 <UART_SetConfig+0x2b2>
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800595a:	d204      	bcs.n	8005966 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	60da      	str	r2, [r3, #12]
 8005964:	e0c2      	b.n	8005aec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800596c:	e0be      	b.n	8005aec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005976:	d16a      	bne.n	8005a4e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005978:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800597c:	2b08      	cmp	r3, #8
 800597e:	d834      	bhi.n	80059ea <UART_SetConfig+0x336>
 8005980:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <UART_SetConfig+0x2d4>)
 8005982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005986:	bf00      	nop
 8005988:	080059ad 	.word	0x080059ad
 800598c:	080059cd 	.word	0x080059cd
 8005990:	080059d5 	.word	0x080059d5
 8005994:	080059eb 	.word	0x080059eb
 8005998:	080059db 	.word	0x080059db
 800599c:	080059eb 	.word	0x080059eb
 80059a0:	080059eb 	.word	0x080059eb
 80059a4:	080059eb 	.word	0x080059eb
 80059a8:	080059e3 	.word	0x080059e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059ac:	f7fe fabc 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 80059b0:	61f8      	str	r0, [r7, #28]
        break;
 80059b2:	e020      	b.n	80059f6 <UART_SetConfig+0x342>
 80059b4:	efff69f3 	.word	0xefff69f3
 80059b8:	40008000 	.word	0x40008000
 80059bc:	40013800 	.word	0x40013800
 80059c0:	40021000 	.word	0x40021000
 80059c4:	40004400 	.word	0x40004400
 80059c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059cc:	f7fe fac2 	bl	8003f54 <HAL_RCC_GetPCLK2Freq>
 80059d0:	61f8      	str	r0, [r7, #28]
        break;
 80059d2:	e010      	b.n	80059f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d4:	4b4c      	ldr	r3, [pc, #304]	; (8005b08 <UART_SetConfig+0x454>)
 80059d6:	61fb      	str	r3, [r7, #28]
        break;
 80059d8:	e00d      	b.n	80059f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059da:	f7fe fa0d 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 80059de:	61f8      	str	r0, [r7, #28]
        break;
 80059e0:	e009      	b.n	80059f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e6:	61fb      	str	r3, [r7, #28]
        break;
 80059e8:	e005      	b.n	80059f6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d077      	beq.n	8005aec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	005a      	lsls	r2, r3, #1
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	085b      	lsrs	r3, r3, #1
 8005a06:	441a      	add	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	2b0f      	cmp	r3, #15
 8005a16:	d916      	bls.n	8005a46 <UART_SetConfig+0x392>
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1e:	d212      	bcs.n	8005a46 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f023 030f 	bic.w	r3, r3, #15
 8005a28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	085b      	lsrs	r3, r3, #1
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	8afb      	ldrh	r3, [r7, #22]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	8afa      	ldrh	r2, [r7, #22]
 8005a42:	60da      	str	r2, [r3, #12]
 8005a44:	e052      	b.n	8005aec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a4c:	e04e      	b.n	8005aec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d827      	bhi.n	8005aa6 <UART_SetConfig+0x3f2>
 8005a56:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <UART_SetConfig+0x3a8>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005a81 	.word	0x08005a81
 8005a60:	08005a89 	.word	0x08005a89
 8005a64:	08005a91 	.word	0x08005a91
 8005a68:	08005aa7 	.word	0x08005aa7
 8005a6c:	08005a97 	.word	0x08005a97
 8005a70:	08005aa7 	.word	0x08005aa7
 8005a74:	08005aa7 	.word	0x08005aa7
 8005a78:	08005aa7 	.word	0x08005aa7
 8005a7c:	08005a9f 	.word	0x08005a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a80:	f7fe fa52 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 8005a84:	61f8      	str	r0, [r7, #28]
        break;
 8005a86:	e014      	b.n	8005ab2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a88:	f7fe fa64 	bl	8003f54 <HAL_RCC_GetPCLK2Freq>
 8005a8c:	61f8      	str	r0, [r7, #28]
        break;
 8005a8e:	e010      	b.n	8005ab2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a90:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <UART_SetConfig+0x454>)
 8005a92:	61fb      	str	r3, [r7, #28]
        break;
 8005a94:	e00d      	b.n	8005ab2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a96:	f7fe f9af 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8005a9a:	61f8      	str	r0, [r7, #28]
        break;
 8005a9c:	e009      	b.n	8005ab2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aa2:	61fb      	str	r3, [r7, #28]
        break;
 8005aa4:	e005      	b.n	8005ab2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ab0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d019      	beq.n	8005aec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	085a      	lsrs	r2, r3, #1
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	441a      	add	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b0f      	cmp	r3, #15
 8005ad0:	d909      	bls.n	8005ae6 <UART_SetConfig+0x432>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad8:	d205      	bcs.n	8005ae6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60da      	str	r2, [r3, #12]
 8005ae4:	e002      	b.n	8005aec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005af8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3728      	adds	r7, #40	; 0x28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b06:	bf00      	nop
 8005b08:	00f42400 	.word	0x00f42400

08005b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00a      	beq.n	8005b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01a      	beq.n	8005c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c0a:	d10a      	bne.n	8005c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	605a      	str	r2, [r3, #4]
  }
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b098      	sub	sp, #96	; 0x60
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c60:	f7fb fa02 	bl	8001068 <HAL_GetTick>
 8005c64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d12e      	bne.n	8005cd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f88c 	bl	8005da0 <UART_WaitOnFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d021      	beq.n	8005cd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cac:	647b      	str	r3, [r7, #68]	; 0x44
 8005cae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e6      	bne.n	8005c8e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e062      	b.n	8005d98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d149      	bne.n	8005d74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f856 	bl	8005da0 <UART_WaitOnFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d03c      	beq.n	8005d74 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	623b      	str	r3, [r7, #32]
   return(result);
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d18:	633b      	str	r3, [r7, #48]	; 0x30
 8005d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e6      	bne.n	8005cfa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3308      	adds	r3, #8
 8005d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d4c:	61fa      	str	r2, [r7, #28]
 8005d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	69b9      	ldr	r1, [r7, #24]
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	617b      	str	r3, [r7, #20]
   return(result);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e5      	bne.n	8005d2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e011      	b.n	8005d98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3758      	adds	r7, #88	; 0x58
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db0:	e049      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db8:	d045      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dba:	f7fb f955 	bl	8001068 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d302      	bcc.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e048      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d031      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d110      	bne.n	8005e12 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2208      	movs	r2, #8
 8005df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f838 	bl	8005e6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2208      	movs	r2, #8
 8005e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e029      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e20:	d111      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f81e 	bl	8005e6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e00f      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d0a6      	beq.n	8005db2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b095      	sub	sp, #84	; 0x54
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e94:	643b      	str	r3, [r7, #64]	; 0x40
 8005e96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e6      	bne.n	8005e76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3308      	adds	r3, #8
 8005eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f023 0301 	bic.w	r3, r3, #1
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e5      	bne.n	8005ea8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d118      	bne.n	8005f16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f023 0310 	bic.w	r3, r3, #16
 8005ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f02:	61bb      	str	r3, [r7, #24]
 8005f04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6979      	ldr	r1, [r7, #20]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e6      	bne.n	8005ee4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f2a:	bf00      	nop
 8005f2c:	3754      	adds	r7, #84	; 0x54
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <memset>:
 8005f36:	4402      	add	r2, r0
 8005f38:	4603      	mov	r3, r0
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d100      	bne.n	8005f40 <memset+0xa>
 8005f3e:	4770      	bx	lr
 8005f40:	f803 1b01 	strb.w	r1, [r3], #1
 8005f44:	e7f9      	b.n	8005f3a <memset+0x4>
	...

08005f48 <__libc_init_array>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	4d0d      	ldr	r5, [pc, #52]	; (8005f80 <__libc_init_array+0x38>)
 8005f4c:	4c0d      	ldr	r4, [pc, #52]	; (8005f84 <__libc_init_array+0x3c>)
 8005f4e:	1b64      	subs	r4, r4, r5
 8005f50:	10a4      	asrs	r4, r4, #2
 8005f52:	2600      	movs	r6, #0
 8005f54:	42a6      	cmp	r6, r4
 8005f56:	d109      	bne.n	8005f6c <__libc_init_array+0x24>
 8005f58:	4d0b      	ldr	r5, [pc, #44]	; (8005f88 <__libc_init_array+0x40>)
 8005f5a:	4c0c      	ldr	r4, [pc, #48]	; (8005f8c <__libc_init_array+0x44>)
 8005f5c:	f000 f818 	bl	8005f90 <_init>
 8005f60:	1b64      	subs	r4, r4, r5
 8005f62:	10a4      	asrs	r4, r4, #2
 8005f64:	2600      	movs	r6, #0
 8005f66:	42a6      	cmp	r6, r4
 8005f68:	d105      	bne.n	8005f76 <__libc_init_array+0x2e>
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
 8005f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f70:	4798      	blx	r3
 8005f72:	3601      	adds	r6, #1
 8005f74:	e7ee      	b.n	8005f54 <__libc_init_array+0xc>
 8005f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7a:	4798      	blx	r3
 8005f7c:	3601      	adds	r6, #1
 8005f7e:	e7f2      	b.n	8005f66 <__libc_init_array+0x1e>
 8005f80:	08005ff8 	.word	0x08005ff8
 8005f84:	08005ff8 	.word	0x08005ff8
 8005f88:	08005ff8 	.word	0x08005ff8
 8005f8c:	08005ffc 	.word	0x08005ffc

08005f90 <_init>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	bf00      	nop
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr

08005f9c <_fini>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	bf00      	nop
 8005fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa2:	bc08      	pop	{r3}
 8005fa4:	469e      	mov	lr, r3
 8005fa6:	4770      	bx	lr
